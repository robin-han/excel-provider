//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Sql.g4 by ANTLR 4.6.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GrapeCity.Enterprise.Data.DataSource.Common.SqlParse {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1")]
[System.CLSCompliant(false)]
public partial class SqlParser : Parser {
	public const int
		NUMERIC_BOOLEAN=1, SCOL=2, DOT=3, OPEN_PAR=4, CLOSE_PAR=5, COMMA=6, ASSIGN=7, 
		STAR=8, PLUS=9, MINUS=10, TILDE=11, PIPE2=12, DIV=13, MOD=14, LT2=15, 
		GT2=16, AMP=17, PIPE=18, LT=19, LT_EQ=20, GT=21, GT_EQ=22, EQ=23, NOT_EQ1=24, 
		NOT_EQ2=25, K_ABORT=26, K_ACTION=27, K_ADD=28, K_AFTER=29, K_ALL=30, K_ALTER=31, 
		K_ANALYZE=32, K_AND=33, K_AS=34, K_ASC=35, K_ATTACH=36, K_AUTOINCREMENT=37, 
		K_BEFORE=38, K_BEGIN=39, K_BETWEEN=40, K_BY=41, K_CASCADE=42, K_CASE=43, 
		K_CAST=44, K_CHECK=45, K_COLLATE=46, K_COLUMN=47, K_COMMIT=48, K_CONFLICT=49, 
		K_CONSTRAINT=50, K_CREATE=51, K_CROSS=52, K_CURRENT_DATE=53, K_CURRENT_TIME=54, 
		K_CURRENT_TIMESTAMP=55, K_DATABASE=56, K_DEFAULT=57, K_DEFERRABLE=58, 
		K_DEFERRED=59, K_DELETE=60, K_DESC=61, K_DETACH=62, K_DISTINCT=63, K_DROP=64, 
		K_EACH=65, K_ELSE=66, K_END=67, K_ESCAPE=68, K_EXCEPT=69, K_EXCLUSIVE=70, 
		K_EXISTS=71, K_EXPLAIN=72, K_FAIL=73, K_FOR=74, K_FOREIGN=75, K_FROM=76, 
		K_FULL=77, K_GLOB=78, K_GROUP=79, K_HAVING=80, K_IF=81, K_IGNORE=82, K_IMMEDIATE=83, 
		K_IN=84, K_INDEX=85, K_INDEXED=86, K_INITIALLY=87, K_INNER=88, K_INSERT=89, 
		K_INSTEAD=90, K_INTERSECT=91, K_INTO=92, K_IS=93, K_ISNULL=94, K_JOIN=95, 
		K_KEY=96, K_LEFT=97, K_LIKE=98, K_LIMIT=99, K_MATCH=100, K_NATURAL=101, 
		K_NO=102, K_NOT=103, K_NOTNULL=104, K_NULL=105, K_OF=106, K_OFFSET=107, 
		K_ON=108, K_OR=109, K_ORDER=110, K_OUTER=111, K_PLAN=112, K_PRIMARY=113, 
		K_QUERY=114, K_RAISE=115, K_REFERENCES=116, K_REGEXP=117, K_REINDEX=118, 
		K_RELEASE=119, K_RENAME=120, K_REPLACE=121, K_RESTRICT=122, K_RIGHT=123, 
		K_ROLLBACK=124, K_ROW=125, K_SAVEPOINT=126, K_SELECT=127, K_SET=128, K_TABLE=129, 
		K_TEMP=130, K_TEMPORARY=131, K_THEN=132, K_TO=133, K_TRANSACTION=134, 
		K_TRIGGER=135, K_UNION=136, K_UNIQUE=137, K_UPDATE=138, K_USING=139, K_VALUES=140, 
		K_VIEW=141, K_VIRTUAL=142, K_WHEN=143, K_WHERE=144, IDENTIFIER=145, NUMERIC_LITERAL=146, 
		BIND_PARAMETER=147, STRING_LITERAL=148, BLOB_LITERAL=149, SINGLE_LINE_COMMENT=150, 
		MULTILINE_COMMENT=151, SPACES=152, UNEXPECTED_CHAR=153;
	public const int
		RULE_parse = 0, RULE_error = 1, RULE_sql_stmt_list = 2, RULE_sql_stmt = 3, 
		RULE_begin_stmt = 4, RULE_commit_stmt = 5, RULE_delete_stmt = 6, RULE_factored_select_stmt = 7, 
		RULE_compound_clause = 8, RULE_limit_clause = 9, RULE_insert_stmt = 10, 
		RULE_values_list = 11, RULE_release_stmt = 12, RULE_rollback_stmt = 13, 
		RULE_savepoint_stmt = 14, RULE_simple_select_stmt = 15, RULE_select_stmt = 16, 
		RULE_select_or_values = 17, RULE_update_stmt = 18, RULE_set_clause = 19, 
		RULE_update_stmt_limited = 20, RULE_column_def = 21, RULE_type_name = 22, 
		RULE_column_constraint = 23, RULE_conflict_clause = 24, RULE_expr = 25, 
		RULE_in_list_expr = 26, RULE_function = 27, RULE_args_list = 28, RULE_foreign_key_clause = 29, 
		RULE_raise_function = 30, RULE_indexed_column = 31, RULE_table_constraint = 32, 
		RULE_qualified_table_name = 33, RULE_ordering_term = 34, RULE_result_column = 35, 
		RULE_table_or_subquery = 36, RULE_join_clause = 37, RULE_join_right = 38, 
		RULE_join_operator = 39, RULE_join_constraint = 40, RULE_select_core = 41, 
		RULE_where_clause = 42, RULE_groupby_clause = 43, RULE_having_clause = 44, 
		RULE_compound_operator = 45, RULE_signed_number = 46, RULE_literal_value = 47, 
		RULE_unary_operator = 48, RULE_error_message = 49, RULE_module_argument = 50, 
		RULE_column_alias = 51, RULE_keyword = 52, RULE_name = 53, RULE_function_name = 54, 
		RULE_database_name = 55, RULE_table_name = 56, RULE_table_or_index_name = 57, 
		RULE_new_table_name = 58, RULE_column_name = 59, RULE_collation_name = 60, 
		RULE_foreign_table = 61, RULE_index_name = 62, RULE_trigger_name = 63, 
		RULE_view_name = 64, RULE_module_name = 65, RULE_pragma_name = 66, RULE_savepoint_name = 67, 
		RULE_table_alias = 68, RULE_transaction_name = 69, RULE_any_name = 70;
	public static readonly string[] ruleNames = {
		"parse", "error", "sql_stmt_list", "sql_stmt", "begin_stmt", "commit_stmt", 
		"delete_stmt", "factored_select_stmt", "compound_clause", "limit_clause", 
		"insert_stmt", "values_list", "release_stmt", "rollback_stmt", "savepoint_stmt", 
		"simple_select_stmt", "select_stmt", "select_or_values", "update_stmt", 
		"set_clause", "update_stmt_limited", "column_def", "type_name", "column_constraint", 
		"conflict_clause", "expr", "in_list_expr", "function", "args_list", "foreign_key_clause", 
		"raise_function", "indexed_column", "table_constraint", "qualified_table_name", 
		"ordering_term", "result_column", "table_or_subquery", "join_clause", 
		"join_right", "join_operator", "join_constraint", "select_core", "where_clause", 
		"groupby_clause", "having_clause", "compound_operator", "signed_number", 
		"literal_value", "unary_operator", "error_message", "module_argument", 
		"column_alias", "keyword", "name", "function_name", "database_name", "table_name", 
		"table_or_index_name", "new_table_name", "column_name", "collation_name", 
		"foreign_table", "index_name", "trigger_name", "view_name", "module_name", 
		"pragma_name", "savepoint_name", "table_alias", "transaction_name", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", 
		"'~'", "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", 
		"'>'", "'>='", "'=='", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMERIC_BOOLEAN", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", 
		"ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", 
		"GT2", "AMP", "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
		"K_ABORT", "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", 
		"K_AND", "K_AS", "K_ASC", "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
		"K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", "K_COLLATE", 
		"K_COLUMN", "K_COMMIT", "K_CONFLICT", "K_CONSTRAINT", "K_CREATE", "K_CROSS", 
		"K_CURRENT_DATE", "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
		"K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", "K_DESC", "K_DETACH", 
		"K_DISTINCT", "K_DROP", "K_EACH", "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", 
		"K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
		"K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", 
		"K_IMMEDIATE", "K_IN", "K_INDEX", "K_INDEXED", "K_INITIALLY", "K_INNER", 
		"K_INSERT", "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
		"K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", "K_MATCH", "K_NATURAL", 
		"K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", 
		"K_ORDER", "K_OUTER", "K_PLAN", "K_PRIMARY", "K_QUERY", "K_RAISE", "K_REFERENCES", 
		"K_REGEXP", "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", "K_RESTRICT", 
		"K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", "K_SET", 
		"K_TABLE", "K_TEMP", "K_TEMPORARY", "K_THEN", "K_TO", "K_TRANSACTION", 
		"K_TRIGGER", "K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", "K_VALUES", 
		"K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "IDENTIFIER", "NUMERIC_LITERAL", 
		"BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
		"MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SqlParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SqlParser.Eof, 0); }
		public Sql_stmt_listContext sql_stmt_list() {
			return GetRuleContext<Sql_stmt_listContext>(0);
		}
		public ErrorContext[] error() {
			return GetRuleContexts<ErrorContext>();
		}
		public ErrorContext error(int i) {
			return GetRuleContext<ErrorContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << K_BEGIN) | (1L << K_COMMIT) | (1L << K_DELETE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (K_END - 67)) | (1L << (K_EXPLAIN - 67)) | (1L << (K_INSERT - 67)) | (1L << (K_RELEASE - 67)) | (1L << (K_ROLLBACK - 67)) | (1L << (K_SAVEPOINT - 67)) | (1L << (K_SELECT - 67)))) != 0) || _la==K_UPDATE || _la==K_VALUES) {
				{
				State = 142; sql_stmt_list();
				}
			}

			State = 148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==UNEXPECTED_CHAR) {
				{
				{
				State = 145; error();
				}
				}
				State = 150;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 151; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(SqlParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(UNEXPECTED_CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SCOL) {
				{
				{
				State = 155; Match(SCOL);
				}
				}
				State = 160;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 161; sql_stmt();
			State = 170;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 163;
					_errHandler.Sync(this);
					_la = _input.La(1);
					do {
						{
						{
						State = 162; Match(SCOL);
						}
						}
						State = 165;
						_errHandler.Sync(this);
						_la = _input.La(1);
					} while ( _la==SCOL );
					State = 167; sql_stmt();
					}
					} 
				}
				State = 172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			State = 176;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SCOL) {
				{
				{
				State = 173; Match(SCOL);
				}
				}
				State = 178;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		public Factored_select_stmtContext factored_select_stmt() {
			return GetRuleContext<Factored_select_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Release_stmtContext release_stmt() {
			return GetRuleContext<Release_stmtContext>(0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		public Savepoint_stmtContext savepoint_stmt() {
			return GetRuleContext<Savepoint_stmtContext>(0);
		}
		public Simple_select_stmtContext simple_select_stmt() {
			return GetRuleContext<Simple_select_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		public Update_stmt_limitedContext update_stmt_limited() {
			return GetRuleContext<Update_stmt_limitedContext>(0);
		}
		public ITerminalNode K_EXPLAIN() { return GetToken(SqlParser.K_EXPLAIN, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SqlParser.K_QUERY, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SqlParser.K_PLAN, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_EXPLAIN) {
				{
				State = 179; Match(K_EXPLAIN);
				State = 182;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_QUERY) {
					{
					State = 180; Match(K_QUERY);
					State = 181; Match(K_PLAN);
					}
				}

				}
			}

			State = 198;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 186; begin_stmt();
				}
				break;

			case 2:
				{
				State = 187; commit_stmt();
				}
				break;

			case 3:
				{
				State = 188; delete_stmt();
				}
				break;

			case 4:
				{
				State = 189; factored_select_stmt();
				}
				break;

			case 5:
				{
				State = 190; insert_stmt();
				}
				break;

			case 6:
				{
				State = 191; release_stmt();
				}
				break;

			case 7:
				{
				State = 192; rollback_stmt();
				}
				break;

			case 8:
				{
				State = 193; savepoint_stmt();
				}
				break;

			case 9:
				{
				State = 194; simple_select_stmt();
				}
				break;

			case 10:
				{
				State = 195; select_stmt();
				}
				break;

			case 11:
				{
				State = 196; update_stmt();
				}
				break;

			case 12:
				{
				State = 197; update_stmt_limited();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		public ITerminalNode K_BEGIN() { return GetToken(SqlParser.K_BEGIN, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SqlParser.K_TRANSACTION, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SqlParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SqlParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SqlParser.K_EXCLUSIVE, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterBegin_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitBegin_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(K_BEGIN);
			State = 202;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (K_DEFERRED - 59)) | (1L << (K_EXCLUSIVE - 59)) | (1L << (K_IMMEDIATE - 59)))) != 0)) {
				{
				State = 201;
				_la = _input.La(1);
				if ( !(((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & ((1L << (K_DEFERRED - 59)) | (1L << (K_EXCLUSIVE - 59)) | (1L << (K_IMMEDIATE - 59)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 204; Match(K_TRANSACTION);
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAR) | (1L << K_ABORT) | (1L << K_ACTION) | (1L << K_ADD) | (1L << K_AFTER) | (1L << K_ALL) | (1L << K_ALTER) | (1L << K_ANALYZE) | (1L << K_AND) | (1L << K_AS) | (1L << K_ASC) | (1L << K_ATTACH) | (1L << K_AUTOINCREMENT) | (1L << K_BEFORE) | (1L << K_BEGIN) | (1L << K_BETWEEN) | (1L << K_BY) | (1L << K_CASCADE) | (1L << K_CASE) | (1L << K_CAST) | (1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_COLUMN) | (1L << K_COMMIT) | (1L << K_CONFLICT) | (1L << K_CONSTRAINT) | (1L << K_CREATE) | (1L << K_CROSS) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP) | (1L << K_DATABASE) | (1L << K_DEFAULT) | (1L << K_DEFERRABLE) | (1L << K_DEFERRED) | (1L << K_DELETE) | (1L << K_DESC) | (1L << K_DETACH) | (1L << K_DISTINCT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_DROP - 64)) | (1L << (K_EACH - 64)) | (1L << (K_ELSE - 64)) | (1L << (K_END - 64)) | (1L << (K_ESCAPE - 64)) | (1L << (K_EXCEPT - 64)) | (1L << (K_EXCLUSIVE - 64)) | (1L << (K_EXISTS - 64)) | (1L << (K_EXPLAIN - 64)) | (1L << (K_FAIL - 64)) | (1L << (K_FOR - 64)) | (1L << (K_FOREIGN - 64)) | (1L << (K_FROM - 64)) | (1L << (K_FULL - 64)) | (1L << (K_GLOB - 64)) | (1L << (K_GROUP - 64)) | (1L << (K_HAVING - 64)) | (1L << (K_IF - 64)) | (1L << (K_IGNORE - 64)) | (1L << (K_IMMEDIATE - 64)) | (1L << (K_IN - 64)) | (1L << (K_INDEX - 64)) | (1L << (K_INDEXED - 64)) | (1L << (K_INITIALLY - 64)) | (1L << (K_INNER - 64)) | (1L << (K_INSERT - 64)) | (1L << (K_INSTEAD - 64)) | (1L << (K_INTERSECT - 64)) | (1L << (K_INTO - 64)) | (1L << (K_IS - 64)) | (1L << (K_ISNULL - 64)) | (1L << (K_JOIN - 64)) | (1L << (K_KEY - 64)) | (1L << (K_LEFT - 64)) | (1L << (K_LIKE - 64)) | (1L << (K_LIMIT - 64)) | (1L << (K_MATCH - 64)) | (1L << (K_NATURAL - 64)) | (1L << (K_NO - 64)) | (1L << (K_NOT - 64)) | (1L << (K_NOTNULL - 64)) | (1L << (K_NULL - 64)) | (1L << (K_OF - 64)) | (1L << (K_OFFSET - 64)) | (1L << (K_ON - 64)) | (1L << (K_OR - 64)) | (1L << (K_ORDER - 64)) | (1L << (K_OUTER - 64)) | (1L << (K_PLAN - 64)) | (1L << (K_PRIMARY - 64)) | (1L << (K_QUERY - 64)) | (1L << (K_RAISE - 64)) | (1L << (K_REFERENCES - 64)) | (1L << (K_REGEXP - 64)) | (1L << (K_REINDEX - 64)) | (1L << (K_RELEASE - 64)) | (1L << (K_RENAME - 64)) | (1L << (K_REPLACE - 64)) | (1L << (K_RESTRICT - 64)) | (1L << (K_RIGHT - 64)) | (1L << (K_ROLLBACK - 64)) | (1L << (K_ROW - 64)) | (1L << (K_SAVEPOINT - 64)) | (1L << (K_SELECT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (K_SET - 128)) | (1L << (K_TABLE - 128)) | (1L << (K_TEMP - 128)) | (1L << (K_TEMPORARY - 128)) | (1L << (K_THEN - 128)) | (1L << (K_TO - 128)) | (1L << (K_TRANSACTION - 128)) | (1L << (K_TRIGGER - 128)) | (1L << (K_UNION - 128)) | (1L << (K_UNIQUE - 128)) | (1L << (K_UPDATE - 128)) | (1L << (K_USING - 128)) | (1L << (K_VALUES - 128)) | (1L << (K_VIEW - 128)) | (1L << (K_VIRTUAL - 128)) | (1L << (K_WHEN - 128)) | (1L << (K_WHERE - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (STRING_LITERAL - 128)))) != 0)) {
					{
					State = 205; transaction_name();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		public ITerminalNode K_COMMIT() { return GetToken(SqlParser.K_COMMIT, 0); }
		public ITerminalNode K_END() { return GetToken(SqlParser.K_END, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SqlParser.K_TRANSACTION, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = _input.La(1);
			if ( !(_la==K_COMMIT || _la==K_END) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 215;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 211; Match(K_TRANSACTION);
				State = 213;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPEN_PAR) | (1L << K_ABORT) | (1L << K_ACTION) | (1L << K_ADD) | (1L << K_AFTER) | (1L << K_ALL) | (1L << K_ALTER) | (1L << K_ANALYZE) | (1L << K_AND) | (1L << K_AS) | (1L << K_ASC) | (1L << K_ATTACH) | (1L << K_AUTOINCREMENT) | (1L << K_BEFORE) | (1L << K_BEGIN) | (1L << K_BETWEEN) | (1L << K_BY) | (1L << K_CASCADE) | (1L << K_CASE) | (1L << K_CAST) | (1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_COLUMN) | (1L << K_COMMIT) | (1L << K_CONFLICT) | (1L << K_CONSTRAINT) | (1L << K_CREATE) | (1L << K_CROSS) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP) | (1L << K_DATABASE) | (1L << K_DEFAULT) | (1L << K_DEFERRABLE) | (1L << K_DEFERRED) | (1L << K_DELETE) | (1L << K_DESC) | (1L << K_DETACH) | (1L << K_DISTINCT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_DROP - 64)) | (1L << (K_EACH - 64)) | (1L << (K_ELSE - 64)) | (1L << (K_END - 64)) | (1L << (K_ESCAPE - 64)) | (1L << (K_EXCEPT - 64)) | (1L << (K_EXCLUSIVE - 64)) | (1L << (K_EXISTS - 64)) | (1L << (K_EXPLAIN - 64)) | (1L << (K_FAIL - 64)) | (1L << (K_FOR - 64)) | (1L << (K_FOREIGN - 64)) | (1L << (K_FROM - 64)) | (1L << (K_FULL - 64)) | (1L << (K_GLOB - 64)) | (1L << (K_GROUP - 64)) | (1L << (K_HAVING - 64)) | (1L << (K_IF - 64)) | (1L << (K_IGNORE - 64)) | (1L << (K_IMMEDIATE - 64)) | (1L << (K_IN - 64)) | (1L << (K_INDEX - 64)) | (1L << (K_INDEXED - 64)) | (1L << (K_INITIALLY - 64)) | (1L << (K_INNER - 64)) | (1L << (K_INSERT - 64)) | (1L << (K_INSTEAD - 64)) | (1L << (K_INTERSECT - 64)) | (1L << (K_INTO - 64)) | (1L << (K_IS - 64)) | (1L << (K_ISNULL - 64)) | (1L << (K_JOIN - 64)) | (1L << (K_KEY - 64)) | (1L << (K_LEFT - 64)) | (1L << (K_LIKE - 64)) | (1L << (K_LIMIT - 64)) | (1L << (K_MATCH - 64)) | (1L << (K_NATURAL - 64)) | (1L << (K_NO - 64)) | (1L << (K_NOT - 64)) | (1L << (K_NOTNULL - 64)) | (1L << (K_NULL - 64)) | (1L << (K_OF - 64)) | (1L << (K_OFFSET - 64)) | (1L << (K_ON - 64)) | (1L << (K_OR - 64)) | (1L << (K_ORDER - 64)) | (1L << (K_OUTER - 64)) | (1L << (K_PLAN - 64)) | (1L << (K_PRIMARY - 64)) | (1L << (K_QUERY - 64)) | (1L << (K_RAISE - 64)) | (1L << (K_REFERENCES - 64)) | (1L << (K_REGEXP - 64)) | (1L << (K_REINDEX - 64)) | (1L << (K_RELEASE - 64)) | (1L << (K_RENAME - 64)) | (1L << (K_REPLACE - 64)) | (1L << (K_RESTRICT - 64)) | (1L << (K_RIGHT - 64)) | (1L << (K_ROLLBACK - 64)) | (1L << (K_ROW - 64)) | (1L << (K_SAVEPOINT - 64)) | (1L << (K_SELECT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (K_SET - 128)) | (1L << (K_TABLE - 128)) | (1L << (K_TEMP - 128)) | (1L << (K_TEMPORARY - 128)) | (1L << (K_THEN - 128)) | (1L << (K_TO - 128)) | (1L << (K_TRANSACTION - 128)) | (1L << (K_TRIGGER - 128)) | (1L << (K_UNION - 128)) | (1L << (K_UNIQUE - 128)) | (1L << (K_UPDATE - 128)) | (1L << (K_USING - 128)) | (1L << (K_VALUES - 128)) | (1L << (K_VIEW - 128)) | (1L << (K_VIRTUAL - 128)) | (1L << (K_WHEN - 128)) | (1L << (K_WHERE - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (STRING_LITERAL - 128)))) != 0)) {
					{
					State = 212; transaction_name();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public ITerminalNode K_DELETE() { return GetToken(SqlParser.K_DELETE, 0); }
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(K_DELETE);
			State = 218; Match(K_FROM);
			State = 219; qualified_table_name();
			State = 221;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 220; where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factored_select_stmtContext : ParserRuleContext {
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public Compound_clauseContext[] compound_clause() {
			return GetRuleContexts<Compound_clauseContext>();
		}
		public Compound_clauseContext compound_clause(int i) {
			return GetRuleContext<Compound_clauseContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		public Factored_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factored_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterFactored_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitFactored_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactored_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factored_select_stmtContext factored_select_stmt() {
		Factored_select_stmtContext _localctx = new Factored_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_factored_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; select_core();
			State = 227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 224; compound_clause();
				}
				}
				State = 229;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 230; Match(K_ORDER);
				State = 231; Match(K_BY);
				State = 232; ordering_term();
				State = 237;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 233; Match(COMMA);
					State = 234; ordering_term();
					}
					}
					State = 239;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 243;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 242; limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_clauseContext : ParserRuleContext {
		public Compound_operatorContext compound_operator() {
			return GetRuleContext<Compound_operatorContext>(0);
		}
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public Compound_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCompound_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCompound_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_clauseContext compound_clause() {
		Compound_clauseContext _localctx = new Compound_clauseContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_compound_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; compound_operator();
			State = 246; select_core();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimit_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_limit_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(K_LIMIT);
			State = 249; expr(0);
			State = 252;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMA || _la==K_OFFSET) {
				{
				State = 250;
				_la = _input.La(1);
				if ( !(_la==COMMA || _la==K_OFFSET) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 251; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public ITerminalNode K_INSERT() { return GetToken(SqlParser.K_INSERT, 0); }
		public ITerminalNode K_INTO() { return GetToken(SqlParser.K_INTO, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_VALUES() { return GetToken(SqlParser.K_VALUES, 0); }
		public Values_listContext[] values_list() {
			return GetRuleContexts<Values_listContext>();
		}
		public Values_listContext values_list(int i) {
			return GetRuleContext<Values_listContext>(i);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(SqlParser.K_DEFAULT, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(K_INSERT);
			State = 255; Match(K_INTO);
			State = 256; qualified_table_name();
			State = 268;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 257; Match(OPEN_PAR);
				State = 258; column_name();
				State = 263;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 259; Match(COMMA);
					State = 260; column_name();
					}
					}
					State = 265;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 266; Match(CLOSE_PAR);
				}
			}

			State = 282;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 270; Match(K_VALUES);
				State = 271; values_list();
				State = 276;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 272; Match(COMMA);
					State = 273; values_list();
					}
					}
					State = 278;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 279; select_stmt();
				}
				break;

			case 3:
				{
				State = 280; Match(K_DEFAULT);
				State = 281; Match(K_VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_listContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Values_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterValues_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitValues_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Values_listContext values_list() {
		Values_listContext _localctx = new Values_listContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_values_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(OPEN_PAR);
			State = 285; expr(0);
			State = 290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 286; Match(COMMA);
				State = 287; expr(0);
				}
				}
				State = 292;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 293; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Release_stmtContext : ParserRuleContext {
		public ITerminalNode K_RELEASE() { return GetToken(SqlParser.K_RELEASE, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode K_SAVEPOINT() { return GetToken(SqlParser.K_SAVEPOINT, 0); }
		public Release_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_release_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterRelease_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitRelease_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelease_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Release_stmtContext release_stmt() {
		Release_stmtContext _localctx = new Release_stmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_release_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(K_RELEASE);
			State = 297;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 296; Match(K_SAVEPOINT);
				}
				break;
			}
			State = 299; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SqlParser.K_TRANSACTION, 0); }
		public ITerminalNode K_TO() { return GetToken(SqlParser.K_TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public ITerminalNode K_SAVEPOINT() { return GetToken(SqlParser.K_SAVEPOINT, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(K_ROLLBACK);
			State = 306;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 302; Match(K_TRANSACTION);
				State = 304;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					State = 303; transaction_name();
					}
					break;
				}
				}
			}

			State = 313;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_TO) {
				{
				State = 308; Match(K_TO);
				State = 310;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					State = 309; Match(K_SAVEPOINT);
					}
					break;
				}
				State = 312; savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_stmtContext : ParserRuleContext {
		public ITerminalNode K_SAVEPOINT() { return GetToken(SqlParser.K_SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSavepoint_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSavepoint_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_stmtContext savepoint_stmt() {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_savepoint_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(K_SAVEPOINT);
			State = 316; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_stmtContext : ParserRuleContext {
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Simple_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSimple_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSimple_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_stmtContext simple_select_stmt() {
		Simple_select_stmtContext _localctx = new Simple_select_stmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_simple_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; select_core();
			State = 329;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 319; Match(K_ORDER);
				State = 320; Match(K_BY);
				State = 321; ordering_term();
				State = 326;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 322; Match(COMMA);
					State = 323; ordering_term();
					}
					}
					State = 328;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 337;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 331; Match(K_LIMIT);
				State = 332; expr(0);
				State = 335;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 333;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 334; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_or_valuesContext[] select_or_values() {
			return GetRuleContexts<Select_or_valuesContext>();
		}
		public Select_or_valuesContext select_or_values(int i) {
			return GetRuleContext<Select_or_valuesContext>(i);
		}
		public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; select_or_values();
			State = 345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 340; compound_operator();
				State = 341; select_or_values();
				}
				}
				State = 347;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 358;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 348; Match(K_ORDER);
				State = 349; Match(K_BY);
				State = 350; ordering_term();
				State = 355;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 351; Match(COMMA);
					State = 352; ordering_term();
					}
					}
					State = 357;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT) {
				{
				State = 360; Match(K_LIMIT);
				State = 361; expr(0);
				State = 364;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 362;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 363; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_valuesContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(SqlParser.K_SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_GROUP() { return GetToken(SqlParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SqlParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(SqlParser.K_ALL, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_HAVING() { return GetToken(SqlParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SqlParser.K_VALUES, 0); }
		public Select_or_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSelect_or_values(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSelect_or_values(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_valuesContext select_or_values() {
		Select_or_valuesContext _localctx = new Select_or_valuesContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_select_or_values);
		int _la;
		try {
			State = 442;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368; Match(K_SELECT);
				State = 370;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					State = 369;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 372; result_column();
				State = 377;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 373; Match(COMMA);
					State = 374; result_column();
					}
					}
					State = 379;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 392;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 380; Match(K_FROM);
					State = 390;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
					case 1:
						{
						State = 381; table_or_subquery();
						State = 386;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 382; Match(COMMA);
							State = 383; table_or_subquery();
							}
							}
							State = 388;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 389; join_clause();
						}
						break;
					}
					}
				}

				State = 396;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 394; Match(K_WHERE);
					State = 395; expr(0);
					}
				}

				State = 412;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 398; Match(K_GROUP);
					State = 399; Match(K_BY);
					State = 400; expr(0);
					State = 405;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 401; Match(COMMA);
						State = 402; expr(0);
						}
						}
						State = 407;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 410;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_HAVING) {
						{
						State = 408; Match(K_HAVING);
						State = 409; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; Match(K_VALUES);
				State = 415; Match(OPEN_PAR);
				State = 416; expr(0);
				State = 421;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 417; Match(COMMA);
					State = 418; expr(0);
					}
					}
					State = 423;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 424; Match(CLOSE_PAR);
				State = 439;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 425; Match(COMMA);
					State = 426; Match(OPEN_PAR);
					State = 427; expr(0);
					State = 432;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 428; Match(COMMA);
						State = 429; expr(0);
						}
						}
						State = 434;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 435; Match(CLOSE_PAR);
					}
					}
					State = 441;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(SqlParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public Set_clauseContext set_clause() {
			return GetRuleContext<Set_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(K_UPDATE);
			State = 445; qualified_table_name();
			State = 446; set_clause();
			State = 448;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 447; where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clauseContext : ParserRuleContext {
		public ITerminalNode K_SET() { return GetToken(SqlParser.K_SET, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSet_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSet_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_clauseContext set_clause() {
		Set_clauseContext _localctx = new Set_clauseContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_set_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(K_SET);
			State = 451; expr(0);
			State = 456;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 452; Match(COMMA);
				State = 453; expr(0);
				}
				}
				State = 458;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(SqlParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SqlParser.K_SET, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_OR() { return GetToken(SqlParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SqlParser.K_REPLACE, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public Update_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmt_limitedContext update_stmt_limited() {
		Update_stmt_limitedContext _localctx = new Update_stmt_limitedContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_update_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; Match(K_UPDATE);
			State = 470;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 460; Match(K_OR);
				State = 461; Match(K_ROLLBACK);
				}
				break;

			case 2:
				{
				State = 462; Match(K_OR);
				State = 463; Match(K_ABORT);
				}
				break;

			case 3:
				{
				State = 464; Match(K_OR);
				State = 465; Match(K_REPLACE);
				}
				break;

			case 4:
				{
				State = 466; Match(K_OR);
				State = 467; Match(K_FAIL);
				}
				break;

			case 5:
				{
				State = 468; Match(K_OR);
				State = 469; Match(K_IGNORE);
				}
				break;
			}
			State = 472; qualified_table_name();
			State = 473; Match(K_SET);
			State = 474; column_name();
			State = 475; Match(ASSIGN);
			State = 476; expr(0);
			State = 484;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 477; Match(COMMA);
				State = 478; column_name();
				State = 479; Match(ASSIGN);
				State = 480; expr(0);
				}
				}
				State = 486;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 487; Match(K_WHERE);
				State = 488; expr(0);
				}
			}

			State = 509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 501;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ORDER) {
					{
					State = 491; Match(K_ORDER);
					State = 492; Match(K_BY);
					State = 493; ordering_term();
					State = 498;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 494; Match(COMMA);
						State = 495; ordering_term();
						}
						}
						State = 500;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 503; Match(K_LIMIT);
				State = 504; expr(0);
				State = 507;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 505;
					_la = _input.La(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 506; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; column_name();
			State = 513;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				State = 512; type_name();
				}
				break;
			}
			State = 518;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_CONSTRAINT) | (1L << K_DEFAULT))) != 0) || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (K_NOT - 103)) | (1L << (K_NULL - 103)) | (1L << (K_PRIMARY - 103)) | (1L << (K_REFERENCES - 103)) | (1L << (K_UNIQUE - 103)))) != 0)) {
				{
				{
				State = 515; column_constraint();
				}
				}
				State = 520;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Signed_numberContext[] signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 521; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 524;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,63,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 526; Match(OPEN_PAR);
				State = 527; signed_number();
				State = 528; Match(CLOSE_PAR);
				}
				break;

			case 2:
				{
				State = 530; Match(OPEN_PAR);
				State = 531; signed_number();
				State = 532; Match(COMMA);
				State = 533; signed_number();
				State = 534; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode K_PRIMARY() { return GetToken(SqlParser.K_PRIMARY, 0); }
		public ITerminalNode K_KEY() { return GetToken(SqlParser.K_KEY, 0); }
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_NULL() { return GetToken(SqlParser.K_NULL, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SqlParser.K_UNIQUE, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SqlParser.K_CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(SqlParser.K_DEFAULT, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode K_CONSTRAINT() { return GetToken(SqlParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SqlParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_ASC() { return GetToken(SqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SqlParser.K_DESC, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 538; Match(K_CONSTRAINT);
				State = 539; name();
				}
			}

			State = 575;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_PRIMARY:
				{
				State = 542; Match(K_PRIMARY);
				State = 543; Match(K_KEY);
				State = 545;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ASC || _la==K_DESC) {
					{
					State = 544;
					_la = _input.La(1);
					if ( !(_la==K_ASC || _la==K_DESC) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 547; conflict_clause();
				State = 549;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_AUTOINCREMENT) {
					{
					State = 548; Match(K_AUTOINCREMENT);
					}
				}

				}
				break;
			case K_NOT:
			case K_NULL:
				{
				State = 552;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 551; Match(K_NOT);
					}
				}

				State = 554; Match(K_NULL);
				State = 555; conflict_clause();
				}
				break;
			case K_UNIQUE:
				{
				State = 556; Match(K_UNIQUE);
				State = 557; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 558; Match(K_CHECK);
				State = 559; Match(OPEN_PAR);
				State = 560; expr(0);
				State = 561; Match(CLOSE_PAR);
				}
				break;
			case K_DEFAULT:
				{
				State = 563; Match(K_DEFAULT);
				State = 570;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					State = 564; signed_number();
					}
					break;

				case 2:
					{
					State = 565; literal_value();
					}
					break;

				case 3:
					{
					State = 566; Match(OPEN_PAR);
					State = 567; expr(0);
					State = 568; Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case K_COLLATE:
				{
				State = 572; Match(K_COLLATE);
				State = 573; collation_name();
				}
				break;
			case K_REFERENCES:
				{
				State = 574; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SqlParser.K_ON, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SqlParser.K_CONFLICT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SqlParser.K_REPLACE, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterConflict_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitConflict_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ON) {
				{
				State = 577; Match(K_ON);
				State = 578; Match(K_CONFLICT);
				State = 579;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (K_FAIL - 73)) | (1L << (K_IGNORE - 73)) | (1L << (K_REPLACE - 73)) | (1L << (K_ROLLBACK - 73)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode BIND_PARAMETER() { return GetToken(SqlParser.BIND_PARAMETER, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_IS() { return GetToken(SqlParser.K_IS, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SqlParser.K_LIKE, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SqlParser.K_GLOB, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SqlParser.K_MATCH, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SqlParser.K_REGEXP, 0); }
		public ITerminalNode K_AND() { return GetToken(SqlParser.K_AND, 0); }
		public ITerminalNode K_OR() { return GetToken(SqlParser.K_OR, 0); }
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode K_CAST() { return GetToken(SqlParser.K_CAST, 0); }
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ESCAPE() { return GetToken(SqlParser.K_ESCAPE, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SqlParser.K_ISNULL, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SqlParser.K_NOTNULL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SqlParser.K_NULL, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(SqlParser.K_BETWEEN, 0); }
		public ITerminalNode K_IN() { return GetToken(SqlParser.K_IN, 0); }
		public Factored_select_stmtContext factored_select_stmt() {
			return GetRuleContext<Factored_select_stmtContext>(0);
		}
		public In_list_exprContext in_list_expr() {
			return GetRuleContext<In_list_exprContext>(0);
		}
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public ITerminalNode K_CASE() { return GetToken(SqlParser.K_CASE, 0); }
		public ITerminalNode K_END() { return GetToken(SqlParser.K_END, 0); }
		public ITerminalNode[] K_WHEN() { return GetTokens(SqlParser.K_WHEN); }
		public ITerminalNode K_WHEN(int i) {
			return GetToken(SqlParser.K_WHEN, i);
		}
		public ITerminalNode[] K_THEN() { return GetTokens(SqlParser.K_THEN); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(SqlParser.K_THEN, i);
		}
		public ITerminalNode K_ELSE() { return GetToken(SqlParser.K_ELSE, 0); }
		public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 583; literal_value();
				}
				break;

			case 2:
				{
				State = 584; Match(BIND_PARAMETER);
				}
				break;

			case 3:
				{
				State = 593;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					State = 588;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
					case 1:
						{
						State = 585; database_name();
						State = 586; Match(DOT);
						}
						break;
					}
					State = 590; table_name();
					State = 591; Match(DOT);
					}
					break;
				}
				State = 595; column_name();
				}
				break;

			case 4:
				{
				State = 596; unary_operator();
				State = 597; expr(21);
				}
				break;

			case 5:
				{
				State = 599; function();
				}
				break;

			case 6:
				{
				State = 600; Match(OPEN_PAR);
				State = 601; expr(0);
				State = 602; Match(CLOSE_PAR);
				}
				break;

			case 7:
				{
				State = 604; Match(K_CAST);
				State = 605; Match(OPEN_PAR);
				State = 606; expr(0);
				State = 607; Match(K_AS);
				State = 608; type_name();
				State = 609; Match(CLOSE_PAR);
				}
				break;

			case 8:
				{
				State = 615;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_EXISTS || _la==K_NOT) {
					{
					State = 612;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_NOT) {
						{
						State = 611; Match(K_NOT);
						}
					}

					State = 614; Match(K_EXISTS);
					}
				}

				State = 617; Match(OPEN_PAR);
				State = 618; factored_select_stmt();
				State = 619; Match(CLOSE_PAR);
				}
				break;

			case 9:
				{
				State = 621; Match(K_CASE);
				State = 623;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					State = 622; expr(0);
					}
					break;
				}
				State = 630;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 625; Match(K_WHEN);
					State = 626; expr(0);
					State = 627; Match(K_THEN);
					State = 628; expr(0);
					}
					}
					State = 632;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==K_WHEN );
				State = 636;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_ELSE) {
					{
					State = 634; Match(K_ELSE);
					State = 635; expr(0);
					}
				}

				State = 638; Match(K_END);
				}
				break;

			case 10:
				{
				State = 640; raise_function();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 734;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 732;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 643;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 644; Match(PIPE2);
						State = 645; expr(21);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 646;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 647;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 648; expr(20);
						}
						break;

					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 649;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 650;
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 651; expr(19);
						}
						break;

					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 652;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 653;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 654; expr(18);
						}
						break;

					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 655;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 656;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 657; expr(17);
						}
						break;

					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 658;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 670;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
						case 1:
							{
							State = 659; Match(ASSIGN);
							}
							break;

						case 2:
							{
							State = 660; Match(EQ);
							}
							break;

						case 3:
							{
							State = 661; Match(NOT_EQ1);
							}
							break;

						case 4:
							{
							State = 662; Match(NOT_EQ2);
							}
							break;

						case 5:
							{
							State = 663; Match(K_IS);
							}
							break;

						case 6:
							{
							State = 664; Match(K_IS);
							State = 665; Match(K_NOT);
							}
							break;

						case 7:
							{
							State = 666; Match(K_LIKE);
							}
							break;

						case 8:
							{
							State = 667; Match(K_GLOB);
							}
							break;

						case 9:
							{
							State = 668; Match(K_MATCH);
							}
							break;

						case 10:
							{
							State = 669; Match(K_REGEXP);
							}
							break;
						}
						State = 672; expr(16);
						}
						break;

					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 673;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 674; Match(K_AND);
						State = 675; expr(15);
						}
						break;

					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 676;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 677; Match(K_OR);
						State = 678; expr(14);
						}
						break;

					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 679;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 680; Match(K_IS);
						State = 682;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
						case 1:
							{
							State = 681; Match(K_NOT);
							}
							break;
						}
						State = 684; expr(7);
						}
						break;

					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 685;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 687;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 686; Match(K_NOT);
							}
						}

						State = 689; Match(K_BETWEEN);
						State = 690; expr(0);
						State = 691; Match(K_AND);
						State = 692; expr(6);
						}
						break;

					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 694;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 695; Match(K_COLLATE);
						State = 696; collation_name();
						}
						break;

					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 697;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 699;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 698; Match(K_NOT);
							}
						}

						State = 701;
						_la = _input.La(1);
						if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (K_GLOB - 78)) | (1L << (K_LIKE - 78)) | (1L << (K_MATCH - 78)) | (1L << (K_REGEXP - 78)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 702; expr(0);
						State = 705;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
						case 1:
							{
							State = 703; Match(K_ESCAPE);
							State = 704; expr(0);
							}
							break;
						}
						}
						break;

					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 707;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 712;
						_errHandler.Sync(this);
						switch (_input.La(1)) {
						case K_ISNULL:
							{
							State = 708; Match(K_ISNULL);
							}
							break;
						case K_NOTNULL:
							{
							State = 709; Match(K_NOTNULL);
							}
							break;
						case K_NOT:
							{
							State = 710; Match(K_NOT);
							State = 711; Match(K_NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 714;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 716;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 715; Match(K_NOT);
							}
						}

						State = 718; Match(K_IN);
						State = 730;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
						case 1:
							{
							State = 719; Match(OPEN_PAR);
							State = 720; factored_select_stmt();
							State = 721; Match(CLOSE_PAR);
							}
							break;

						case 2:
							{
							State = 723; in_list_expr();
							}
							break;

						case 3:
							{
							State = 727;
							_errHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
							case 1:
								{
								State = 724; database_name();
								State = 725; Match(DOT);
								}
								break;
							}
							State = 729; table_name();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 736;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class In_list_exprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public In_list_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_list_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterIn_list_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitIn_list_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_list_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_list_exprContext in_list_expr() {
		In_list_exprContext _localctx = new In_list_exprContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_in_list_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737; Match(OPEN_PAR);
			State = 738; expr(0);
			State = 743;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 739; Match(COMMA);
				State = 740; expr(0);
				}
				}
				State = 745;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 746; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Args_listContext args_list() {
			return GetRuleContext<Args_listContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748; function_name();
			State = 749; Match(OPEN_PAR);
			State = 751;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMERIC_BOOLEAN) | (1L << OPEN_PAR) | (1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << TILDE) | (1L << K_ABORT) | (1L << K_ACTION) | (1L << K_ADD) | (1L << K_AFTER) | (1L << K_ALL) | (1L << K_ALTER) | (1L << K_ANALYZE) | (1L << K_AND) | (1L << K_AS) | (1L << K_ASC) | (1L << K_ATTACH) | (1L << K_AUTOINCREMENT) | (1L << K_BEFORE) | (1L << K_BEGIN) | (1L << K_BETWEEN) | (1L << K_BY) | (1L << K_CASCADE) | (1L << K_CASE) | (1L << K_CAST) | (1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_COLUMN) | (1L << K_COMMIT) | (1L << K_CONFLICT) | (1L << K_CONSTRAINT) | (1L << K_CREATE) | (1L << K_CROSS) | (1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP) | (1L << K_DATABASE) | (1L << K_DEFAULT) | (1L << K_DEFERRABLE) | (1L << K_DEFERRED) | (1L << K_DELETE) | (1L << K_DESC) | (1L << K_DETACH) | (1L << K_DISTINCT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_DROP - 64)) | (1L << (K_EACH - 64)) | (1L << (K_ELSE - 64)) | (1L << (K_END - 64)) | (1L << (K_ESCAPE - 64)) | (1L << (K_EXCEPT - 64)) | (1L << (K_EXCLUSIVE - 64)) | (1L << (K_EXISTS - 64)) | (1L << (K_EXPLAIN - 64)) | (1L << (K_FAIL - 64)) | (1L << (K_FOR - 64)) | (1L << (K_FOREIGN - 64)) | (1L << (K_FROM - 64)) | (1L << (K_FULL - 64)) | (1L << (K_GLOB - 64)) | (1L << (K_GROUP - 64)) | (1L << (K_HAVING - 64)) | (1L << (K_IF - 64)) | (1L << (K_IGNORE - 64)) | (1L << (K_IMMEDIATE - 64)) | (1L << (K_IN - 64)) | (1L << (K_INDEX - 64)) | (1L << (K_INDEXED - 64)) | (1L << (K_INITIALLY - 64)) | (1L << (K_INNER - 64)) | (1L << (K_INSERT - 64)) | (1L << (K_INSTEAD - 64)) | (1L << (K_INTERSECT - 64)) | (1L << (K_INTO - 64)) | (1L << (K_IS - 64)) | (1L << (K_ISNULL - 64)) | (1L << (K_JOIN - 64)) | (1L << (K_KEY - 64)) | (1L << (K_LEFT - 64)) | (1L << (K_LIKE - 64)) | (1L << (K_LIMIT - 64)) | (1L << (K_MATCH - 64)) | (1L << (K_NATURAL - 64)) | (1L << (K_NO - 64)) | (1L << (K_NOT - 64)) | (1L << (K_NOTNULL - 64)) | (1L << (K_NULL - 64)) | (1L << (K_OF - 64)) | (1L << (K_OFFSET - 64)) | (1L << (K_ON - 64)) | (1L << (K_OR - 64)) | (1L << (K_ORDER - 64)) | (1L << (K_OUTER - 64)) | (1L << (K_PLAN - 64)) | (1L << (K_PRIMARY - 64)) | (1L << (K_QUERY - 64)) | (1L << (K_RAISE - 64)) | (1L << (K_REFERENCES - 64)) | (1L << (K_REGEXP - 64)) | (1L << (K_REINDEX - 64)) | (1L << (K_RELEASE - 64)) | (1L << (K_RENAME - 64)) | (1L << (K_REPLACE - 64)) | (1L << (K_RESTRICT - 64)) | (1L << (K_RIGHT - 64)) | (1L << (K_ROLLBACK - 64)) | (1L << (K_ROW - 64)) | (1L << (K_SAVEPOINT - 64)) | (1L << (K_SELECT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (K_SET - 128)) | (1L << (K_TABLE - 128)) | (1L << (K_TEMP - 128)) | (1L << (K_TEMPORARY - 128)) | (1L << (K_THEN - 128)) | (1L << (K_TO - 128)) | (1L << (K_TRANSACTION - 128)) | (1L << (K_TRIGGER - 128)) | (1L << (K_UNION - 128)) | (1L << (K_UNIQUE - 128)) | (1L << (K_UPDATE - 128)) | (1L << (K_USING - 128)) | (1L << (K_VALUES - 128)) | (1L << (K_VIEW - 128)) | (1L << (K_VIRTUAL - 128)) | (1L << (K_WHEN - 128)) | (1L << (K_WHERE - 128)) | (1L << (IDENTIFIER - 128)) | (1L << (NUMERIC_LITERAL - 128)) | (1L << (BIND_PARAMETER - 128)) | (1L << (STRING_LITERAL - 128)) | (1L << (BLOB_LITERAL - 128)))) != 0)) {
				{
				State = 750; args_list();
				}
			}

			State = 753; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Args_listContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterArgs_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitArgs_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Args_listContext args_list() {
		Args_listContext _localctx = new Args_listContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_args_list);
		int _la;
		try {
			State = 764;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 755; Match(STAR);
				}
				break;
			case NUMERIC_BOOLEAN:
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case TILDE:
			case K_ABORT:
			case K_ACTION:
			case K_ADD:
			case K_AFTER:
			case K_ALL:
			case K_ALTER:
			case K_ANALYZE:
			case K_AND:
			case K_AS:
			case K_ASC:
			case K_ATTACH:
			case K_AUTOINCREMENT:
			case K_BEFORE:
			case K_BEGIN:
			case K_BETWEEN:
			case K_BY:
			case K_CASCADE:
			case K_CASE:
			case K_CAST:
			case K_CHECK:
			case K_COLLATE:
			case K_COLUMN:
			case K_COMMIT:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CREATE:
			case K_CROSS:
			case K_CURRENT_DATE:
			case K_CURRENT_TIME:
			case K_CURRENT_TIMESTAMP:
			case K_DATABASE:
			case K_DEFAULT:
			case K_DEFERRABLE:
			case K_DEFERRED:
			case K_DELETE:
			case K_DESC:
			case K_DETACH:
			case K_DISTINCT:
			case K_DROP:
			case K_EACH:
			case K_ELSE:
			case K_END:
			case K_ESCAPE:
			case K_EXCEPT:
			case K_EXCLUSIVE:
			case K_EXISTS:
			case K_EXPLAIN:
			case K_FAIL:
			case K_FOR:
			case K_FOREIGN:
			case K_FROM:
			case K_FULL:
			case K_GLOB:
			case K_GROUP:
			case K_HAVING:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IN:
			case K_INDEX:
			case K_INDEXED:
			case K_INITIALLY:
			case K_INNER:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERSECT:
			case K_INTO:
			case K_IS:
			case K_ISNULL:
			case K_JOIN:
			case K_KEY:
			case K_LEFT:
			case K_LIKE:
			case K_LIMIT:
			case K_MATCH:
			case K_NATURAL:
			case K_NO:
			case K_NOT:
			case K_NOTNULL:
			case K_NULL:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_OR:
			case K_ORDER:
			case K_OUTER:
			case K_PLAN:
			case K_PRIMARY:
			case K_QUERY:
			case K_RAISE:
			case K_REFERENCES:
			case K_REGEXP:
			case K_REINDEX:
			case K_RELEASE:
			case K_RENAME:
			case K_REPLACE:
			case K_RESTRICT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_TABLE:
			case K_TEMP:
			case K_TEMPORARY:
			case K_THEN:
			case K_TO:
			case K_TRANSACTION:
			case K_TRIGGER:
			case K_UNION:
			case K_UNIQUE:
			case K_UPDATE:
			case K_USING:
			case K_VALUES:
			case K_VIEW:
			case K_VIRTUAL:
			case K_WHEN:
			case K_WHERE:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case BLOB_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 756; expr(0);
				State = 761;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 757; Match(COMMA);
					State = 758; expr(0);
					}
					}
					State = 763;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode K_REFERENCES() { return GetToken(SqlParser.K_REFERENCES, 0); }
		public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_DEFERRABLE() { return GetToken(SqlParser.K_DEFERRABLE, 0); }
		public ITerminalNode[] K_ON() { return GetTokens(SqlParser.K_ON); }
		public ITerminalNode K_ON(int i) {
			return GetToken(SqlParser.K_ON, i);
		}
		public ITerminalNode[] K_MATCH() { return GetTokens(SqlParser.K_MATCH); }
		public ITerminalNode K_MATCH(int i) {
			return GetToken(SqlParser.K_MATCH, i);
		}
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public ITerminalNode[] K_DELETE() { return GetTokens(SqlParser.K_DELETE); }
		public ITerminalNode K_DELETE(int i) {
			return GetToken(SqlParser.K_DELETE, i);
		}
		public ITerminalNode[] K_UPDATE() { return GetTokens(SqlParser.K_UPDATE); }
		public ITerminalNode K_UPDATE(int i) {
			return GetToken(SqlParser.K_UPDATE, i);
		}
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SqlParser.K_INITIALLY, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SqlParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SqlParser.K_IMMEDIATE, 0); }
		public ITerminalNode[] K_SET() { return GetTokens(SqlParser.K_SET); }
		public ITerminalNode K_SET(int i) {
			return GetToken(SqlParser.K_SET, i);
		}
		public ITerminalNode[] K_NULL() { return GetTokens(SqlParser.K_NULL); }
		public ITerminalNode K_NULL(int i) {
			return GetToken(SqlParser.K_NULL, i);
		}
		public ITerminalNode[] K_DEFAULT() { return GetTokens(SqlParser.K_DEFAULT); }
		public ITerminalNode K_DEFAULT(int i) {
			return GetToken(SqlParser.K_DEFAULT, i);
		}
		public ITerminalNode[] K_CASCADE() { return GetTokens(SqlParser.K_CASCADE); }
		public ITerminalNode K_CASCADE(int i) {
			return GetToken(SqlParser.K_CASCADE, i);
		}
		public ITerminalNode[] K_RESTRICT() { return GetTokens(SqlParser.K_RESTRICT); }
		public ITerminalNode K_RESTRICT(int i) {
			return GetToken(SqlParser.K_RESTRICT, i);
		}
		public ITerminalNode[] K_NO() { return GetTokens(SqlParser.K_NO); }
		public ITerminalNode K_NO(int i) {
			return GetToken(SqlParser.K_NO, i);
		}
		public ITerminalNode[] K_ACTION() { return GetTokens(SqlParser.K_ACTION); }
		public ITerminalNode K_ACTION(int i) {
			return GetToken(SqlParser.K_ACTION, i);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterForeign_key_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitForeign_key_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766; Match(K_REFERENCES);
			State = 767; foreign_table();
			State = 779;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 768; Match(OPEN_PAR);
				State = 769; column_name();
				State = 774;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 770; Match(COMMA);
					State = 771; column_name();
					}
					}
					State = 776;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 777; Match(CLOSE_PAR);
				}
			}

			State = 799;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_MATCH || _la==K_ON) {
				{
				{
				State = 795;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_ON:
					{
					State = 781; Match(K_ON);
					State = 782;
					_la = _input.La(1);
					if ( !(_la==K_DELETE || _la==K_UPDATE) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 791;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,97,_ctx) ) {
					case 1:
						{
						State = 783; Match(K_SET);
						State = 784; Match(K_NULL);
						}
						break;

					case 2:
						{
						State = 785; Match(K_SET);
						State = 786; Match(K_DEFAULT);
						}
						break;

					case 3:
						{
						State = 787; Match(K_CASCADE);
						}
						break;

					case 4:
						{
						State = 788; Match(K_RESTRICT);
						}
						break;

					case 5:
						{
						State = 789; Match(K_NO);
						State = 790; Match(K_ACTION);
						}
						break;
					}
					}
					break;
				case K_MATCH:
					{
					State = 793; Match(K_MATCH);
					State = 794; name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 801;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 812;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 803;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 802; Match(K_NOT);
					}
				}

				State = 805; Match(K_DEFERRABLE);
				State = 810;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					State = 806; Match(K_INITIALLY);
					State = 807; Match(K_DEFERRED);
					}
					break;

				case 2:
					{
					State = 808; Match(K_INITIALLY);
					State = 809; Match(K_IMMEDIATE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		public ITerminalNode K_RAISE() { return GetToken(SqlParser.K_RAISE, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterRaise_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitRaise_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814; Match(K_RAISE);
			State = 815; Match(OPEN_PAR);
			State = 820;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_IGNORE:
				{
				State = 816; Match(K_IGNORE);
				}
				break;
			case K_ABORT:
			case K_FAIL:
			case K_ROLLBACK:
				{
				State = 817;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || _la==K_FAIL || _la==K_ROLLBACK) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 818; Match(COMMA);
				State = 819; error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 822; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SqlParser.K_DESC, 0); }
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterIndexed_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitIndexed_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824; column_name();
			State = 827;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 825; Match(K_COLLATE);
				State = 826; collation_name();
				}
			}

			State = 830;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 829;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_CHECK() { return GetToken(SqlParser.K_CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_FOREIGN() { return GetToken(SqlParser.K_FOREIGN, 0); }
		public ITerminalNode K_KEY() { return GetToken(SqlParser.K_KEY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode K_CONSTRAINT() { return GetToken(SqlParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode K_PRIMARY() { return GetToken(SqlParser.K_PRIMARY, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SqlParser.K_UNIQUE, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 832; Match(K_CONSTRAINT);
				State = 833; name();
				}
			}

			State = 872;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_PRIMARY:
			case K_UNIQUE:
				{
				State = 839;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_PRIMARY:
					{
					State = 836; Match(K_PRIMARY);
					State = 837; Match(K_KEY);
					}
					break;
				case K_UNIQUE:
					{
					State = 838; Match(K_UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 841; Match(OPEN_PAR);
				State = 842; indexed_column();
				State = 847;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 843; Match(COMMA);
					State = 844; indexed_column();
					}
					}
					State = 849;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 850; Match(CLOSE_PAR);
				State = 851; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 853; Match(K_CHECK);
				State = 854; Match(OPEN_PAR);
				State = 855; expr(0);
				State = 856; Match(CLOSE_PAR);
				}
				break;
			case K_FOREIGN:
				{
				State = 858; Match(K_FOREIGN);
				State = 859; Match(K_KEY);
				State = 860; Match(OPEN_PAR);
				State = 861; column_name();
				State = 866;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 862; Match(COMMA);
					State = 863; column_name();
					}
					}
					State = 868;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 869; Match(CLOSE_PAR);
				State = 870; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterQualified_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitQualified_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_qualified_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				State = 874; database_name();
				State = 875; Match(DOT);
				}
				break;
			}
			State = 879; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SqlParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SqlParser.K_DESC, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881; expr(0);
			State = 884;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 882; Match(K_COLLATE);
				State = 883; collation_name();
				}
			}

			State = 887;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 886;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_result_column);
		int _la;
		try {
			State = 901;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,116,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 890; table_name();
				State = 891; Match(DOT);
				State = 892; Match(STAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 894; expr(0);
				State = 899;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 896;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_AS) {
						{
						State = 895; Match(K_AS);
						}
					}

					State = 898; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(SqlParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_table_or_subquery);
		int _la;
		try {
			State = 950;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 906;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					State = 903; database_name();
					State = 904; Match(DOT);
					}
					break;
				}
				State = 908; table_name();
				State = 913;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					State = 910;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
					case 1:
						{
						State = 909; Match(K_AS);
						}
						break;
					}
					State = 912; table_alias();
					}
					break;
				}
				State = 920;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_INDEXED:
					{
					State = 915; Match(K_INDEXED);
					State = 916; Match(K_BY);
					State = 917; index_name();
					}
					break;
				case K_NOT:
					{
					State = 918; Match(K_NOT);
					State = 919; Match(K_INDEXED);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case K_CROSS:
				case K_EXCEPT:
				case K_GROUP:
				case K_INNER:
				case K_INTERSECT:
				case K_JOIN:
				case K_LEFT:
				case K_LIMIT:
				case K_NATURAL:
				case K_ON:
				case K_ORDER:
				case K_UNION:
				case K_USING:
				case K_WHERE:
				case UNEXPECTED_CHAR:
					break;
				default:
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 922; Match(OPEN_PAR);
				State = 932;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					State = 923; table_or_subquery();
					State = 928;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 924; Match(COMMA);
						State = 925; table_or_subquery();
						}
						}
						State = 930;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;

				case 2:
					{
					State = 931; join_clause();
					}
					break;
				}
				State = 934; Match(CLOSE_PAR);
				State = 939;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					State = 936;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
					case 1:
						{
						State = 935; Match(K_AS);
						}
						break;
					}
					State = 938; table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 941; Match(OPEN_PAR);
				State = 942; select_stmt();
				State = 943; Match(CLOSE_PAR);
				State = 948;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					State = 945;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
					case 1:
						{
						State = 944; Match(K_AS);
						}
						break;
					}
					State = 947; table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Table_or_subqueryContext table_or_subquery() {
			return GetRuleContext<Table_or_subqueryContext>(0);
		}
		public Join_rightContext[] join_right() {
			return GetRuleContexts<Join_rightContext>();
		}
		public Join_rightContext join_right(int i) {
			return GetRuleContext<Join_rightContext>(i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; table_or_subquery();
			State = 956;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA || _la==K_CROSS || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (K_INNER - 88)) | (1L << (K_JOIN - 88)) | (1L << (K_LEFT - 88)) | (1L << (K_NATURAL - 88)))) != 0)) {
				{
				{
				State = 953; join_right();
				}
				}
				State = 958;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_rightContext : ParserRuleContext {
		public Join_operatorContext join_operator() {
			return GetRuleContext<Join_operatorContext>(0);
		}
		public Table_or_subqueryContext table_or_subquery() {
			return GetRuleContext<Table_or_subqueryContext>(0);
		}
		public Join_constraintContext join_constraint() {
			return GetRuleContext<Join_constraintContext>(0);
		}
		public Join_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_right; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_right(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_right(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_right(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_rightContext join_right() {
		Join_rightContext _localctx = new Join_rightContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_join_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959; join_operator();
			State = 960; table_or_subquery();
			State = 961; join_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode K_JOIN() { return GetToken(SqlParser.K_JOIN, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SqlParser.K_NATURAL, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SqlParser.K_LEFT, 0); }
		public ITerminalNode K_INNER() { return GetToken(SqlParser.K_INNER, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SqlParser.K_CROSS, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SqlParser.K_OUTER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_join_operator);
		int _la;
		try {
			State = 976;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 963; Match(COMMA);
				}
				break;
			case K_CROSS:
			case K_INNER:
			case K_JOIN:
			case K_LEFT:
			case K_NATURAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 965;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_NATURAL) {
					{
					State = 964; Match(K_NATURAL);
					}
				}

				State = 973;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case K_LEFT:
					{
					State = 967; Match(K_LEFT);
					State = 969;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==K_OUTER) {
						{
						State = 968; Match(K_OUTER);
						}
					}

					}
					break;
				case K_INNER:
					{
					State = 971; Match(K_INNER);
					}
					break;
				case K_CROSS:
					{
					State = 972; Match(K_CROSS);
					}
					break;
				case K_JOIN:
					break;
				default:
					break;
				}
				State = 975; Match(K_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SqlParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_USING() { return GetToken(SqlParser.K_USING, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_join_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 992;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_ON:
				{
				State = 978; Match(K_ON);
				State = 979; expr(0);
				}
				break;
			case K_USING:
				{
				State = 980; Match(K_USING);
				State = 981; Match(OPEN_PAR);
				State = 982; column_name();
				State = 987;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 983; Match(COMMA);
					State = 984; column_name();
					}
					}
					State = 989;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 990; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case CLOSE_PAR:
			case COMMA:
			case K_CROSS:
			case K_EXCEPT:
			case K_GROUP:
			case K_INNER:
			case K_INTERSECT:
			case K_JOIN:
			case K_LEFT:
			case K_LIMIT:
			case K_NATURAL:
			case K_ORDER:
			case K_UNION:
			case K_WHERE:
			case UNEXPECTED_CHAR:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(SqlParser.K_SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Groupby_clauseContext groupby_clause() {
			return GetRuleContext<Groupby_clauseContext>(0);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(SqlParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(SqlParser.K_ALL, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_VALUES() { return GetToken(SqlParser.K_VALUES, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_select_core);
		int _la;
		try {
			State = 1054;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 994; Match(K_SELECT);
				State = 996;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					State = 995;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 998; result_column();
				State = 1003;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 999; Match(COMMA);
					State = 1000; result_column();
					}
					}
					State = 1005;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1018;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 1006; Match(K_FROM);
					State = 1016;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
					case 1:
						{
						State = 1007; table_or_subquery();
						State = 1012;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 1008; Match(COMMA);
							State = 1009; table_or_subquery();
							}
							}
							State = 1014;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 1015; join_clause();
						}
						break;
					}
					}
				}

				State = 1021;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 1020; where_clause();
					}
				}

				State = 1024;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 1023; groupby_clause();
					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1026; Match(K_VALUES);
				State = 1027; Match(OPEN_PAR);
				State = 1028; expr(0);
				State = 1033;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1029; Match(COMMA);
					State = 1030; expr(0);
					}
					}
					State = 1035;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1036; Match(CLOSE_PAR);
				State = 1051;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1037; Match(COMMA);
					State = 1038; Match(OPEN_PAR);
					State = 1039; expr(0);
					State = 1044;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1040; Match(COMMA);
						State = 1041; expr(0);
						}
						}
						State = 1046;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1047; Match(CLOSE_PAR);
					}
					}
					State = 1053;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056; Match(K_WHERE);
			State = 1057; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupby_clauseContext : ParserRuleContext {
		public ITerminalNode K_GROUP() { return GetToken(SqlParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		public Groupby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterGroupby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitGroupby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupby_clauseContext groupby_clause() {
		Groupby_clauseContext _localctx = new Groupby_clauseContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_groupby_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059; Match(K_GROUP);
			State = 1060; Match(K_BY);
			State = 1061; expr(0);
			State = 1066;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1062; Match(COMMA);
				State = 1063; expr(0);
				}
				}
				State = 1068;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1070;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==K_HAVING) {
				{
				State = 1069; having_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		public ITerminalNode K_HAVING() { return GetToken(SqlParser.K_HAVING, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterHaving_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitHaving_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_having_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072; Match(K_HAVING);
			State = 1073; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		public ITerminalNode K_UNION() { return GetToken(SqlParser.K_UNION, 0); }
		public ITerminalNode K_ALL() { return GetToken(SqlParser.K_ALL, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SqlParser.K_INTERSECT, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SqlParser.K_EXCEPT, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCompound_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCompound_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_compound_operator);
		try {
			State = 1080;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075; Match(K_UNION);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1076; Match(K_UNION);
				State = 1077; Match(K_ALL);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1078; Match(K_INTERSECT);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1079; Match(K_EXCEPT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SqlParser.NUMERIC_LITERAL, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1082;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 1085; Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SqlParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public ITerminalNode NUMERIC_BOOLEAN() { return GetToken(SqlParser.NUMERIC_BOOLEAN, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(SqlParser.BLOB_LITERAL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SqlParser.K_NULL, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1087;
			_la = _input.La(1);
			if ( !(_la==NUMERIC_BOOLEAN || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (K_NULL - 105)) | (1L << (NUMERIC_LITERAL - 105)) | (1L << (STRING_LITERAL - 105)) | (1L << (BLOB_LITERAL - 105)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==K_NOT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterModule_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitModule_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_module_argument);
		try {
			State = 1095;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1093; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1094; column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SqlParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			_la = _input.La(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode K_ABORT() { return GetToken(SqlParser.K_ABORT, 0); }
		public ITerminalNode K_ACTION() { return GetToken(SqlParser.K_ACTION, 0); }
		public ITerminalNode K_ADD() { return GetToken(SqlParser.K_ADD, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SqlParser.K_AFTER, 0); }
		public ITerminalNode K_ALL() { return GetToken(SqlParser.K_ALL, 0); }
		public ITerminalNode K_ALTER() { return GetToken(SqlParser.K_ALTER, 0); }
		public ITerminalNode K_ANALYZE() { return GetToken(SqlParser.K_ANALYZE, 0); }
		public ITerminalNode K_AND() { return GetToken(SqlParser.K_AND, 0); }
		public ITerminalNode K_AS() { return GetToken(SqlParser.K_AS, 0); }
		public ITerminalNode K_ASC() { return GetToken(SqlParser.K_ASC, 0); }
		public ITerminalNode K_ATTACH() { return GetToken(SqlParser.K_ATTACH, 0); }
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SqlParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_BEFORE() { return GetToken(SqlParser.K_BEFORE, 0); }
		public ITerminalNode K_BEGIN() { return GetToken(SqlParser.K_BEGIN, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(SqlParser.K_BETWEEN, 0); }
		public ITerminalNode K_BY() { return GetToken(SqlParser.K_BY, 0); }
		public ITerminalNode K_CASCADE() { return GetToken(SqlParser.K_CASCADE, 0); }
		public ITerminalNode K_CASE() { return GetToken(SqlParser.K_CASE, 0); }
		public ITerminalNode K_CAST() { return GetToken(SqlParser.K_CAST, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SqlParser.K_CHECK, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SqlParser.K_COLLATE, 0); }
		public ITerminalNode K_COLUMN() { return GetToken(SqlParser.K_COLUMN, 0); }
		public ITerminalNode K_COMMIT() { return GetToken(SqlParser.K_COMMIT, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SqlParser.K_CONFLICT, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(SqlParser.K_CONSTRAINT, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SqlParser.K_CREATE, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SqlParser.K_CROSS, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SqlParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SqlParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SqlParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_DATABASE() { return GetToken(SqlParser.K_DATABASE, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(SqlParser.K_DEFAULT, 0); }
		public ITerminalNode K_DEFERRABLE() { return GetToken(SqlParser.K_DEFERRABLE, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SqlParser.K_DEFERRED, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SqlParser.K_DELETE, 0); }
		public ITerminalNode K_DESC() { return GetToken(SqlParser.K_DESC, 0); }
		public ITerminalNode K_DETACH() { return GetToken(SqlParser.K_DETACH, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SqlParser.K_DISTINCT, 0); }
		public ITerminalNode K_DROP() { return GetToken(SqlParser.K_DROP, 0); }
		public ITerminalNode K_EACH() { return GetToken(SqlParser.K_EACH, 0); }
		public ITerminalNode K_ELSE() { return GetToken(SqlParser.K_ELSE, 0); }
		public ITerminalNode K_END() { return GetToken(SqlParser.K_END, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(SqlParser.K_ESCAPE, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SqlParser.K_EXCEPT, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SqlParser.K_EXCLUSIVE, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SqlParser.K_EXISTS, 0); }
		public ITerminalNode K_EXPLAIN() { return GetToken(SqlParser.K_EXPLAIN, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SqlParser.K_FAIL, 0); }
		public ITerminalNode K_FOR() { return GetToken(SqlParser.K_FOR, 0); }
		public ITerminalNode K_FOREIGN() { return GetToken(SqlParser.K_FOREIGN, 0); }
		public ITerminalNode K_FROM() { return GetToken(SqlParser.K_FROM, 0); }
		public ITerminalNode K_FULL() { return GetToken(SqlParser.K_FULL, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SqlParser.K_GLOB, 0); }
		public ITerminalNode K_GROUP() { return GetToken(SqlParser.K_GROUP, 0); }
		public ITerminalNode K_HAVING() { return GetToken(SqlParser.K_HAVING, 0); }
		public ITerminalNode K_IF() { return GetToken(SqlParser.K_IF, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SqlParser.K_IGNORE, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SqlParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_IN() { return GetToken(SqlParser.K_IN, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SqlParser.K_INDEX, 0); }
		public ITerminalNode K_INDEXED() { return GetToken(SqlParser.K_INDEXED, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SqlParser.K_INITIALLY, 0); }
		public ITerminalNode K_INNER() { return GetToken(SqlParser.K_INNER, 0); }
		public ITerminalNode K_INSERT() { return GetToken(SqlParser.K_INSERT, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SqlParser.K_INSTEAD, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SqlParser.K_INTERSECT, 0); }
		public ITerminalNode K_INTO() { return GetToken(SqlParser.K_INTO, 0); }
		public ITerminalNode K_IS() { return GetToken(SqlParser.K_IS, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SqlParser.K_ISNULL, 0); }
		public ITerminalNode K_JOIN() { return GetToken(SqlParser.K_JOIN, 0); }
		public ITerminalNode K_KEY() { return GetToken(SqlParser.K_KEY, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SqlParser.K_LEFT, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SqlParser.K_LIKE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SqlParser.K_LIMIT, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SqlParser.K_MATCH, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SqlParser.K_NATURAL, 0); }
		public ITerminalNode K_NO() { return GetToken(SqlParser.K_NO, 0); }
		public ITerminalNode K_NOT() { return GetToken(SqlParser.K_NOT, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SqlParser.K_NOTNULL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SqlParser.K_NULL, 0); }
		public ITerminalNode K_OF() { return GetToken(SqlParser.K_OF, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SqlParser.K_OFFSET, 0); }
		public ITerminalNode K_ON() { return GetToken(SqlParser.K_ON, 0); }
		public ITerminalNode K_OR() { return GetToken(SqlParser.K_OR, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SqlParser.K_ORDER, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SqlParser.K_OUTER, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SqlParser.K_PLAN, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(SqlParser.K_PRIMARY, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SqlParser.K_QUERY, 0); }
		public ITerminalNode K_RAISE() { return GetToken(SqlParser.K_RAISE, 0); }
		public ITerminalNode K_REFERENCES() { return GetToken(SqlParser.K_REFERENCES, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SqlParser.K_REGEXP, 0); }
		public ITerminalNode K_REINDEX() { return GetToken(SqlParser.K_REINDEX, 0); }
		public ITerminalNode K_RELEASE() { return GetToken(SqlParser.K_RELEASE, 0); }
		public ITerminalNode K_RENAME() { return GetToken(SqlParser.K_RENAME, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SqlParser.K_REPLACE, 0); }
		public ITerminalNode K_RESTRICT() { return GetToken(SqlParser.K_RESTRICT, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(SqlParser.K_RIGHT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SqlParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ROW() { return GetToken(SqlParser.K_ROW, 0); }
		public ITerminalNode K_SAVEPOINT() { return GetToken(SqlParser.K_SAVEPOINT, 0); }
		public ITerminalNode K_SELECT() { return GetToken(SqlParser.K_SELECT, 0); }
		public ITerminalNode K_SET() { return GetToken(SqlParser.K_SET, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SqlParser.K_TABLE, 0); }
		public ITerminalNode K_TEMP() { return GetToken(SqlParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SqlParser.K_TEMPORARY, 0); }
		public ITerminalNode K_THEN() { return GetToken(SqlParser.K_THEN, 0); }
		public ITerminalNode K_TO() { return GetToken(SqlParser.K_TO, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SqlParser.K_TRANSACTION, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SqlParser.K_TRIGGER, 0); }
		public ITerminalNode K_UNION() { return GetToken(SqlParser.K_UNION, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SqlParser.K_UNIQUE, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SqlParser.K_UPDATE, 0); }
		public ITerminalNode K_USING() { return GetToken(SqlParser.K_USING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SqlParser.K_VALUES, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SqlParser.K_VIEW, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(SqlParser.K_VIRTUAL, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SqlParser.K_WHEN, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SqlParser.K_WHERE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099;
			_la = _input.La(1);
			if ( !(((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & ((1L << (K_ABORT - 26)) | (1L << (K_ACTION - 26)) | (1L << (K_ADD - 26)) | (1L << (K_AFTER - 26)) | (1L << (K_ALL - 26)) | (1L << (K_ALTER - 26)) | (1L << (K_ANALYZE - 26)) | (1L << (K_AND - 26)) | (1L << (K_AS - 26)) | (1L << (K_ASC - 26)) | (1L << (K_ATTACH - 26)) | (1L << (K_AUTOINCREMENT - 26)) | (1L << (K_BEFORE - 26)) | (1L << (K_BEGIN - 26)) | (1L << (K_BETWEEN - 26)) | (1L << (K_BY - 26)) | (1L << (K_CASCADE - 26)) | (1L << (K_CASE - 26)) | (1L << (K_CAST - 26)) | (1L << (K_CHECK - 26)) | (1L << (K_COLLATE - 26)) | (1L << (K_COLUMN - 26)) | (1L << (K_COMMIT - 26)) | (1L << (K_CONFLICT - 26)) | (1L << (K_CONSTRAINT - 26)) | (1L << (K_CREATE - 26)) | (1L << (K_CROSS - 26)) | (1L << (K_CURRENT_DATE - 26)) | (1L << (K_CURRENT_TIME - 26)) | (1L << (K_CURRENT_TIMESTAMP - 26)) | (1L << (K_DATABASE - 26)) | (1L << (K_DEFAULT - 26)) | (1L << (K_DEFERRABLE - 26)) | (1L << (K_DEFERRED - 26)) | (1L << (K_DELETE - 26)) | (1L << (K_DESC - 26)) | (1L << (K_DETACH - 26)) | (1L << (K_DISTINCT - 26)) | (1L << (K_DROP - 26)) | (1L << (K_EACH - 26)) | (1L << (K_ELSE - 26)) | (1L << (K_END - 26)) | (1L << (K_ESCAPE - 26)) | (1L << (K_EXCEPT - 26)) | (1L << (K_EXCLUSIVE - 26)) | (1L << (K_EXISTS - 26)) | (1L << (K_EXPLAIN - 26)) | (1L << (K_FAIL - 26)) | (1L << (K_FOR - 26)) | (1L << (K_FOREIGN - 26)) | (1L << (K_FROM - 26)) | (1L << (K_FULL - 26)) | (1L << (K_GLOB - 26)) | (1L << (K_GROUP - 26)) | (1L << (K_HAVING - 26)) | (1L << (K_IF - 26)) | (1L << (K_IGNORE - 26)) | (1L << (K_IMMEDIATE - 26)) | (1L << (K_IN - 26)) | (1L << (K_INDEX - 26)) | (1L << (K_INDEXED - 26)) | (1L << (K_INITIALLY - 26)) | (1L << (K_INNER - 26)) | (1L << (K_INSERT - 26)))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (K_INSTEAD - 90)) | (1L << (K_INTERSECT - 90)) | (1L << (K_INTO - 90)) | (1L << (K_IS - 90)) | (1L << (K_ISNULL - 90)) | (1L << (K_JOIN - 90)) | (1L << (K_KEY - 90)) | (1L << (K_LEFT - 90)) | (1L << (K_LIKE - 90)) | (1L << (K_LIMIT - 90)) | (1L << (K_MATCH - 90)) | (1L << (K_NATURAL - 90)) | (1L << (K_NO - 90)) | (1L << (K_NOT - 90)) | (1L << (K_NOTNULL - 90)) | (1L << (K_NULL - 90)) | (1L << (K_OF - 90)) | (1L << (K_OFFSET - 90)) | (1L << (K_ON - 90)) | (1L << (K_OR - 90)) | (1L << (K_ORDER - 90)) | (1L << (K_OUTER - 90)) | (1L << (K_PLAN - 90)) | (1L << (K_PRIMARY - 90)) | (1L << (K_QUERY - 90)) | (1L << (K_RAISE - 90)) | (1L << (K_REFERENCES - 90)) | (1L << (K_REGEXP - 90)) | (1L << (K_REINDEX - 90)) | (1L << (K_RELEASE - 90)) | (1L << (K_RENAME - 90)) | (1L << (K_REPLACE - 90)) | (1L << (K_RESTRICT - 90)) | (1L << (K_RIGHT - 90)) | (1L << (K_ROLLBACK - 90)) | (1L << (K_ROW - 90)) | (1L << (K_SAVEPOINT - 90)) | (1L << (K_SELECT - 90)) | (1L << (K_SET - 90)) | (1L << (K_TABLE - 90)) | (1L << (K_TEMP - 90)) | (1L << (K_TEMPORARY - 90)) | (1L << (K_THEN - 90)) | (1L << (K_TO - 90)) | (1L << (K_TRANSACTION - 90)) | (1L << (K_TRIGGER - 90)) | (1L << (K_UNION - 90)) | (1L << (K_UNIQUE - 90)) | (1L << (K_UPDATE - 90)) | (1L << (K_USING - 90)) | (1L << (K_VALUES - 90)) | (1L << (K_VIEW - 90)) | (1L << (K_VIRTUAL - 90)) | (1L << (K_WHEN - 90)) | (1L << (K_WHERE - 90)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterDatabase_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitDatabase_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_nameContext database_name() {
		Database_nameContext _localctx = new Database_nameContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_database_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_or_index_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_or_index_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_index_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public New_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterNew_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitNew_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_table_nameContext new_table_name() {
		New_table_nameContext _localctx = new New_table_nameContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_new_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1111; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterForeign_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitForeign_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTrigger_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTrigger_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterSavepoint_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitSavepoint_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1131; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterTransaction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitTransaction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SqlParser.IDENTIFIER, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SqlParser.STRING_LITERAL, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISqlListener typedListener = listener as ISqlListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqlVisitor<TResult> typedVisitor = visitor as ISqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_any_name);
		try {
			State = 1142;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1135; Match(IDENTIFIER);
				}
				break;
			case K_ABORT:
			case K_ACTION:
			case K_ADD:
			case K_AFTER:
			case K_ALL:
			case K_ALTER:
			case K_ANALYZE:
			case K_AND:
			case K_AS:
			case K_ASC:
			case K_ATTACH:
			case K_AUTOINCREMENT:
			case K_BEFORE:
			case K_BEGIN:
			case K_BETWEEN:
			case K_BY:
			case K_CASCADE:
			case K_CASE:
			case K_CAST:
			case K_CHECK:
			case K_COLLATE:
			case K_COLUMN:
			case K_COMMIT:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CREATE:
			case K_CROSS:
			case K_CURRENT_DATE:
			case K_CURRENT_TIME:
			case K_CURRENT_TIMESTAMP:
			case K_DATABASE:
			case K_DEFAULT:
			case K_DEFERRABLE:
			case K_DEFERRED:
			case K_DELETE:
			case K_DESC:
			case K_DETACH:
			case K_DISTINCT:
			case K_DROP:
			case K_EACH:
			case K_ELSE:
			case K_END:
			case K_ESCAPE:
			case K_EXCEPT:
			case K_EXCLUSIVE:
			case K_EXISTS:
			case K_EXPLAIN:
			case K_FAIL:
			case K_FOR:
			case K_FOREIGN:
			case K_FROM:
			case K_FULL:
			case K_GLOB:
			case K_GROUP:
			case K_HAVING:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IN:
			case K_INDEX:
			case K_INDEXED:
			case K_INITIALLY:
			case K_INNER:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERSECT:
			case K_INTO:
			case K_IS:
			case K_ISNULL:
			case K_JOIN:
			case K_KEY:
			case K_LEFT:
			case K_LIKE:
			case K_LIMIT:
			case K_MATCH:
			case K_NATURAL:
			case K_NO:
			case K_NOT:
			case K_NOTNULL:
			case K_NULL:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_OR:
			case K_ORDER:
			case K_OUTER:
			case K_PLAN:
			case K_PRIMARY:
			case K_QUERY:
			case K_RAISE:
			case K_REFERENCES:
			case K_REGEXP:
			case K_REINDEX:
			case K_RELEASE:
			case K_RENAME:
			case K_REPLACE:
			case K_RESTRICT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_TABLE:
			case K_TEMP:
			case K_TEMPORARY:
			case K_THEN:
			case K_TO:
			case K_TRANSACTION:
			case K_TRIGGER:
			case K_UNION:
			case K_UNIQUE:
			case K_UPDATE:
			case K_USING:
			case K_VALUES:
			case K_VIEW:
			case K_VIRTUAL:
			case K_WHEN:
			case K_WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1136; keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1137; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1138; Match(OPEN_PAR);
				State = 1139; any_name();
				State = 1140; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 20);

		case 1: return Precpred(_ctx, 19);

		case 2: return Precpred(_ctx, 18);

		case 3: return Precpred(_ctx, 17);

		case 4: return Precpred(_ctx, 16);

		case 5: return Precpred(_ctx, 15);

		case 6: return Precpred(_ctx, 14);

		case 7: return Precpred(_ctx, 13);

		case 8: return Precpred(_ctx, 6);

		case 9: return Precpred(_ctx, 5);

		case 10: return Precpred(_ctx, 9);

		case 11: return Precpred(_ctx, 8);

		case 12: return Precpred(_ctx, 7);

		case 13: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x9B\x47B\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x3\x2\x5\x2\x92\n\x2\x3\x2\a\x2\x95\n\x2\f"+
		"\x2\xE\x2\x98\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\a\x4\x9F\n\x4\f\x4\xE"+
		"\x4\xA2\v\x4\x3\x4\x3\x4\x6\x4\xA6\n\x4\r\x4\xE\x4\xA7\x3\x4\a\x4\xAB"+
		"\n\x4\f\x4\xE\x4\xAE\v\x4\x3\x4\a\x4\xB1\n\x4\f\x4\xE\x4\xB4\v\x4\x3\x5"+
		"\x3\x5\x3\x5\x5\x5\xB9\n\x5\x5\x5\xBB\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\xC9\n\x5\x3\x6\x3"+
		"\x6\x5\x6\xCD\n\x6\x3\x6\x3\x6\x5\x6\xD1\n\x6\x5\x6\xD3\n\x6\x3\a\x3\a"+
		"\x3\a\x5\a\xD8\n\a\x5\a\xDA\n\a\x3\b\x3\b\x3\b\x3\b\x5\b\xE0\n\b\x3\t"+
		"\x3\t\a\t\xE4\n\t\f\t\xE\t\xE7\v\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\xEE\n"+
		"\t\f\t\xE\t\xF1\v\t\x5\t\xF3\n\t\x3\t\x5\t\xF6\n\t\x3\n\x3\n\x3\n\x3\v"+
		"\x3\v\x3\v\x3\v\x5\v\xFF\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x108"+
		"\n\f\f\f\xE\f\x10B\v\f\x3\f\x3\f\x5\f\x10F\n\f\x3\f\x3\f\x3\f\x3\f\a\f"+
		"\x115\n\f\f\f\xE\f\x118\v\f\x3\f\x3\f\x3\f\x5\f\x11D\n\f\x3\r\x3\r\x3"+
		"\r\x3\r\a\r\x123\n\r\f\r\xE\r\x126\v\r\x3\r\x3\r\x3\xE\x3\xE\x5\xE\x12C"+
		"\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x5\xF\x133\n\xF\x5\xF\x135\n\xF\x3"+
		"\xF\x3\xF\x5\xF\x139\n\xF\x3\xF\x5\xF\x13C\n\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x147\n\x11\f\x11\xE\x11"+
		"\x14A\v\x11\x5\x11\x14C\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x152"+
		"\n\x11\x5\x11\x154\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x15A\n\x12"+
		"\f\x12\xE\x12\x15D\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x164"+
		"\n\x12\f\x12\xE\x12\x167\v\x12\x5\x12\x169\n\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x5\x12\x16F\n\x12\x5\x12\x171\n\x12\x3\x13\x3\x13\x5\x13\x175"+
		"\n\x13\x3\x13\x3\x13\x3\x13\a\x13\x17A\n\x13\f\x13\xE\x13\x17D\v\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\a\x13\x183\n\x13\f\x13\xE\x13\x186\v\x13\x3"+
		"\x13\x5\x13\x189\n\x13\x5\x13\x18B\n\x13\x3\x13\x3\x13\x5\x13\x18F\n\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x196\n\x13\f\x13\xE\x13\x199"+
		"\v\x13\x3\x13\x3\x13\x5\x13\x19D\n\x13\x5\x13\x19F\n\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\a\x13\x1A6\n\x13\f\x13\xE\x13\x1A9\v\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x1B1\n\x13\f\x13\xE\x13\x1B4"+
		"\v\x13\x3\x13\x3\x13\a\x13\x1B8\n\x13\f\x13\xE\x13\x1BB\v\x13\x5\x13\x1BD"+
		"\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x1C3\n\x14\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\a\x15\x1C9\n\x15\f\x15\xE\x15\x1CC\v\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x1D9"+
		"\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\a\x16\x1E5\n\x16\f\x16\xE\x16\x1E8\v\x16\x3\x16\x3\x16\x5\x16"+
		"\x1EC\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x1F3\n\x16\f\x16"+
		"\xE\x16\x1F6\v\x16\x5\x16\x1F8\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16"+
		"\x1FE\n\x16\x5\x16\x200\n\x16\x3\x17\x3\x17\x5\x17\x204\n\x17\x3\x17\a"+
		"\x17\x207\n\x17\f\x17\xE\x17\x20A\v\x17\x3\x18\x6\x18\x20D\n\x18\r\x18"+
		"\xE\x18\x20E\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x5\x18\x21B\n\x18\x3\x19\x3\x19\x5\x19\x21F\n\x19\x3\x19\x3"+
		"\x19\x3\x19\x5\x19\x224\n\x19\x3\x19\x3\x19\x5\x19\x228\n\x19\x3\x19\x5"+
		"\x19\x22B\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x23D\n"+
		"\x19\x3\x19\x3\x19\x3\x19\x5\x19\x242\n\x19\x3\x1A\x3\x1A\x3\x1A\x5\x1A"+
		"\x247\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x24F\n\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x254\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x5\x1B\x267\n\x1B\x3\x1B\x5\x1B\x26A\n\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x272\n\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x6\x1B\x279\n\x1B\r\x1B\xE\x1B\x27A\x3\x1B\x3\x1B\x5\x1B"+
		"\x27F\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x284\n\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2A1\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2AD\n\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x2B2\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2BE\n\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x2C4\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2CB"+
		"\n\x1B\x3\x1B\x3\x1B\x5\x1B\x2CF\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2DA\n\x1B\x3\x1B\x5\x1B\x2DD"+
		"\n\x1B\a\x1B\x2DF\n\x1B\f\x1B\xE\x1B\x2E2\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\a\x1C\x2E8\n\x1C\f\x1C\xE\x1C\x2EB\v\x1C\x3\x1C\x3\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x5\x1D\x2F2\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\a\x1E\x2FA\n\x1E\f\x1E\xE\x1E\x2FD\v\x1E\x5\x1E\x2FF\n\x1E\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x307\n\x1F\f\x1F\xE\x1F\x30A\v"+
		"\x1F\x3\x1F\x3\x1F\x5\x1F\x30E\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x31A\n\x1F\x3\x1F\x3\x1F\x5"+
		"\x1F\x31E\n\x1F\a\x1F\x320\n\x1F\f\x1F\xE\x1F\x323\v\x1F\x3\x1F\x5\x1F"+
		"\x326\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x32D\n\x1F\x5\x1F"+
		"\x32F\n\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x5 \x337\n \x3 \x3 \x3!\x3!\x3!\x5"+
		"!\x33E\n!\x3!\x5!\x341\n!\x3\"\x3\"\x5\"\x345\n\"\x3\"\x3\"\x3\"\x5\""+
		"\x34A\n\"\x3\"\x3\"\x3\"\x3\"\a\"\x350\n\"\f\"\xE\"\x353\v\"\x3\"\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x363"+
		"\n\"\f\"\xE\"\x366\v\"\x3\"\x3\"\x3\"\x5\"\x36B\n\"\x3#\x3#\x3#\x5#\x370"+
		"\n#\x3#\x3#\x3$\x3$\x3$\x5$\x377\n$\x3$\x5$\x37A\n$\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x5%\x383\n%\x3%\x5%\x386\n%\x5%\x388\n%\x3&\x3&\x3&\x5&\x38D"+
		"\n&\x3&\x3&\x5&\x391\n&\x3&\x5&\x394\n&\x3&\x3&\x3&\x3&\x3&\x5&\x39B\n"+
		"&\x3&\x3&\x3&\x3&\a&\x3A1\n&\f&\xE&\x3A4\v&\x3&\x5&\x3A7\n&\x3&\x3&\x5"+
		"&\x3AB\n&\x3&\x5&\x3AE\n&\x3&\x3&\x3&\x3&\x5&\x3B4\n&\x3&\x5&\x3B7\n&"+
		"\x5&\x3B9\n&\x3\'\x3\'\a\'\x3BD\n\'\f\'\xE\'\x3C0\v\'\x3(\x3(\x3(\x3("+
		"\x3)\x3)\x5)\x3C8\n)\x3)\x3)\x5)\x3CC\n)\x3)\x3)\x5)\x3D0\n)\x3)\x5)\x3D3"+
		"\n)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\a*\x3DC\n*\f*\xE*\x3DF\v*\x3*\x3*\x5*"+
		"\x3E3\n*\x3+\x3+\x5+\x3E7\n+\x3+\x3+\x3+\a+\x3EC\n+\f+\xE+\x3EF\v+\x3"+
		"+\x3+\x3+\x3+\a+\x3F5\n+\f+\xE+\x3F8\v+\x3+\x5+\x3FB\n+\x5+\x3FD\n+\x3"+
		"+\x5+\x400\n+\x3+\x5+\x403\n+\x3+\x3+\x3+\x3+\x3+\a+\x40A\n+\f+\xE+\x40D"+
		"\v+\x3+\x3+\x3+\x3+\x3+\x3+\a+\x415\n+\f+\xE+\x418\v+\x3+\x3+\a+\x41C"+
		"\n+\f+\xE+\x41F\v+\x5+\x421\n+\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\a-\x42B"+
		"\n-\f-\xE-\x42E\v-\x3-\x5-\x431\n-\x3.\x3.\x3.\x3/\x3/\x3/\x3/\x3/\x5"+
		"/\x43B\n/\x3\x30\x5\x30\x43E\n\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x5\x34\x44A\n\x34\x3\x35\x3\x35\x3"+
		"\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3;\x3;"+
		"\x3<\x3<\x3=\x3=\x3>\x3>\x3?\x3?\x3@\x3@\x3\x41\x3\x41\x3\x42\x3\x42\x3"+
		"\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H"+
		"\x3H\x3H\x3H\x3H\x3H\x5H\x479\nH\x3H\x2\x2\x3\x34I\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		":\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2"+
		"X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2"+
		"v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2"+
		"\x8E\x2\x2\x13\x5\x2==HHUU\x4\x2\x32\x32\x45\x45\x4\x2\b\bmm\x4\x2  \x41"+
		"\x41\x4\x2%%??\a\x2\x1C\x1CKKTT{{~~\x4\x2\n\n\xF\x10\x3\x2\v\f\x3\x2\x11"+
		"\x14\x3\x2\x15\x18\x6\x2PP\x64\x64\x66\x66ww\x4\x2>>\x8C\x8C\x5\x2\x1C"+
		"\x1CKK~~\x6\x2\x3\x3kk\x94\x94\x96\x97\x4\x2\v\rii\x4\x2\x93\x93\x96\x96"+
		"\x3\x2\x1C\x92\x50E\x2\x91\x3\x2\x2\x2\x4\x9B\x3\x2\x2\x2\x6\xA0\x3\x2"+
		"\x2\x2\b\xBA\x3\x2\x2\x2\n\xCA\x3\x2\x2\x2\f\xD4\x3\x2\x2\x2\xE\xDB\x3"+
		"\x2\x2\x2\x10\xE1\x3\x2\x2\x2\x12\xF7\x3\x2\x2\x2\x14\xFA\x3\x2\x2\x2"+
		"\x16\x100\x3\x2\x2\x2\x18\x11E\x3\x2\x2\x2\x1A\x129\x3\x2\x2\x2\x1C\x12F"+
		"\x3\x2\x2\x2\x1E\x13D\x3\x2\x2\x2 \x140\x3\x2\x2\x2\"\x155\x3\x2\x2\x2"+
		"$\x1BC\x3\x2\x2\x2&\x1BE\x3\x2\x2\x2(\x1C4\x3\x2\x2\x2*\x1CD\x3\x2\x2"+
		"\x2,\x201\x3\x2\x2\x2.\x20C\x3\x2\x2\x2\x30\x21E\x3\x2\x2\x2\x32\x246"+
		"\x3\x2\x2\x2\x34\x283\x3\x2\x2\x2\x36\x2E3\x3\x2\x2\x2\x38\x2EE\x3\x2"+
		"\x2\x2:\x2FE\x3\x2\x2\x2<\x300\x3\x2\x2\x2>\x330\x3\x2\x2\x2@\x33A\x3"+
		"\x2\x2\x2\x42\x344\x3\x2\x2\x2\x44\x36F\x3\x2\x2\x2\x46\x373\x3\x2\x2"+
		"\x2H\x387\x3\x2\x2\x2J\x3B8\x3\x2\x2\x2L\x3BA\x3\x2\x2\x2N\x3C1\x3\x2"+
		"\x2\x2P\x3D2\x3\x2\x2\x2R\x3E2\x3\x2\x2\x2T\x420\x3\x2\x2\x2V\x422\x3"+
		"\x2\x2\x2X\x425\x3\x2\x2\x2Z\x432\x3\x2\x2\x2\\\x43A\x3\x2\x2\x2^\x43D"+
		"\x3\x2\x2\x2`\x441\x3\x2\x2\x2\x62\x443\x3\x2\x2\x2\x64\x445\x3\x2\x2"+
		"\x2\x66\x449\x3\x2\x2\x2h\x44B\x3\x2\x2\x2j\x44D\x3\x2\x2\x2l\x44F\x3"+
		"\x2\x2\x2n\x451\x3\x2\x2\x2p\x453\x3\x2\x2\x2r\x455\x3\x2\x2\x2t\x457"+
		"\x3\x2\x2\x2v\x459\x3\x2\x2\x2x\x45B\x3\x2\x2\x2z\x45D\x3\x2\x2\x2|\x45F"+
		"\x3\x2\x2\x2~\x461\x3\x2\x2\x2\x80\x463\x3\x2\x2\x2\x82\x465\x3\x2\x2"+
		"\x2\x84\x467\x3\x2\x2\x2\x86\x469\x3\x2\x2\x2\x88\x46B\x3\x2\x2\x2\x8A"+
		"\x46D\x3\x2\x2\x2\x8C\x46F\x3\x2\x2\x2\x8E\x478\x3\x2\x2\x2\x90\x92\x5"+
		"\x6\x4\x2\x91\x90\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x96\x3\x2\x2\x2"+
		"\x93\x95\x5\x4\x3\x2\x94\x93\x3\x2\x2\x2\x95\x98\x3\x2\x2\x2\x96\x94\x3"+
		"\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x99\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2"+
		"\x99\x9A\a\x2\x2\x3\x9A\x3\x3\x2\x2\x2\x9B\x9C\a\x9B\x2\x2\x9C\x5\x3\x2"+
		"\x2\x2\x9D\x9F\a\x4\x2\x2\x9E\x9D\x3\x2\x2\x2\x9F\xA2\x3\x2\x2\x2\xA0"+
		"\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2\xA0\x3\x2"+
		"\x2\x2\xA3\xAC\x5\b\x5\x2\xA4\xA6\a\x4\x2\x2\xA5\xA4\x3\x2\x2\x2\xA6\xA7"+
		"\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x3\x2\x2"+
		"\x2\xA9\xAB\x5\b\x5\x2\xAA\xA5\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA"+
		"\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xB2\x3\x2\x2\x2\xAE\xAC\x3\x2\x2"+
		"\x2\xAF\xB1\a\x4\x2\x2\xB0\xAF\x3\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0"+
		"\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\a\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2"+
		"\xB5\xB8\aJ\x2\x2\xB6\xB7\at\x2\x2\xB7\xB9\ar\x2\x2\xB8\xB6\x3\x2\x2\x2"+
		"\xB8\xB9\x3\x2\x2\x2\xB9\xBB\x3\x2\x2\x2\xBA\xB5\x3\x2\x2\x2\xBA\xBB\x3"+
		"\x2\x2\x2\xBB\xC8\x3\x2\x2\x2\xBC\xC9\x5\n\x6\x2\xBD\xC9\x5\f\a\x2\xBE"+
		"\xC9\x5\xE\b\x2\xBF\xC9\x5\x10\t\x2\xC0\xC9\x5\x16\f\x2\xC1\xC9\x5\x1A"+
		"\xE\x2\xC2\xC9\x5\x1C\xF\x2\xC3\xC9\x5\x1E\x10\x2\xC4\xC9\x5 \x11\x2\xC5"+
		"\xC9\x5\"\x12\x2\xC6\xC9\x5&\x14\x2\xC7\xC9\x5*\x16\x2\xC8\xBC\x3\x2\x2"+
		"\x2\xC8\xBD\x3\x2\x2\x2\xC8\xBE\x3\x2\x2\x2\xC8\xBF\x3\x2\x2\x2\xC8\xC0"+
		"\x3\x2\x2\x2\xC8\xC1\x3\x2\x2\x2\xC8\xC2\x3\x2\x2\x2\xC8\xC3\x3\x2\x2"+
		"\x2\xC8\xC4\x3\x2\x2\x2\xC8\xC5\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC7"+
		"\x3\x2\x2\x2\xC9\t\x3\x2\x2\x2\xCA\xCC\a)\x2\x2\xCB\xCD\t\x2\x2\x2\xCC"+
		"\xCB\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xD2\x3\x2\x2\x2\xCE\xD0\a\x88"+
		"\x2\x2\xCF\xD1\x5\x8CG\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1"+
		"\xD3\x3\x2\x2\x2\xD2\xCE\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\v\x3\x2\x2"+
		"\x2\xD4\xD9\t\x3\x2\x2\xD5\xD7\a\x88\x2\x2\xD6\xD8\x5\x8CG\x2\xD7\xD6"+
		"\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xDA\x3\x2\x2\x2\xD9\xD5\x3\x2\x2"+
		"\x2\xD9\xDA\x3\x2\x2\x2\xDA\r\x3\x2\x2\x2\xDB\xDC\a>\x2\x2\xDC\xDD\aN"+
		"\x2\x2\xDD\xDF\x5\x44#\x2\xDE\xE0\x5V,\x2\xDF\xDE\x3\x2\x2\x2\xDF\xE0"+
		"\x3\x2\x2\x2\xE0\xF\x3\x2\x2\x2\xE1\xE5\x5T+\x2\xE2\xE4\x5\x12\n\x2\xE3"+
		"\xE2\x3\x2\x2\x2\xE4\xE7\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2"+
		"\x2\x2\xE6\xF2\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xE9\ap\x2\x2\xE9\xEA"+
		"\a+\x2\x2\xEA\xEF\x5\x46$\x2\xEB\xEC\a\b\x2\x2\xEC\xEE\x5\x46$\x2\xED"+
		"\xEB\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2"+
		"\x2\x2\xF0\xF3\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF2\xE8\x3\x2\x2\x2\xF2"+
		"\xF3\x3\x2\x2\x2\xF3\xF5\x3\x2\x2\x2\xF4\xF6\x5\x14\v\x2\xF5\xF4\x3\x2"+
		"\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\x11\x3\x2\x2\x2\xF7\xF8\x5\\/\x2\xF8\xF9"+
		"\x5T+\x2\xF9\x13\x3\x2\x2\x2\xFA\xFB\a\x65\x2\x2\xFB\xFE\x5\x34\x1B\x2"+
		"\xFC\xFD\t\x4\x2\x2\xFD\xFF\x5\x34\x1B\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF"+
		"\x3\x2\x2\x2\xFF\x15\x3\x2\x2\x2\x100\x101\a[\x2\x2\x101\x102\a^\x2\x2"+
		"\x102\x10E\x5\x44#\x2\x103\x104\a\x6\x2\x2\x104\x109\x5x=\x2\x105\x106"+
		"\a\b\x2\x2\x106\x108\x5x=\x2\x107\x105\x3\x2\x2\x2\x108\x10B\x3\x2\x2"+
		"\x2\x109\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10C\x3\x2\x2\x2"+
		"\x10B\x109\x3\x2\x2\x2\x10C\x10D\a\a\x2\x2\x10D\x10F\x3\x2\x2\x2\x10E"+
		"\x103\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x11C\x3\x2\x2\x2\x110\x111"+
		"\a\x8E\x2\x2\x111\x116\x5\x18\r\x2\x112\x113\a\b\x2\x2\x113\x115\x5\x18"+
		"\r\x2\x114\x112\x3\x2\x2\x2\x115\x118\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2"+
		"\x116\x117\x3\x2\x2\x2\x117\x11D\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x119"+
		"\x11D\x5\"\x12\x2\x11A\x11B\a;\x2\x2\x11B\x11D\a\x8E\x2\x2\x11C\x110\x3"+
		"\x2\x2\x2\x11C\x119\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11D\x17\x3\x2\x2"+
		"\x2\x11E\x11F\a\x6\x2\x2\x11F\x124\x5\x34\x1B\x2\x120\x121\a\b\x2\x2\x121"+
		"\x123\x5\x34\x1B\x2\x122\x120\x3\x2\x2\x2\x123\x126\x3\x2\x2\x2\x124\x122"+
		"\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x127\x3\x2\x2\x2\x126\x124\x3"+
		"\x2\x2\x2\x127\x128\a\a\x2\x2\x128\x19\x3\x2\x2\x2\x129\x12B\ay\x2\x2"+
		"\x12A\x12C\a\x80\x2\x2\x12B\x12A\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C"+
		"\x12D\x3\x2\x2\x2\x12D\x12E\x5\x88\x45\x2\x12E\x1B\x3\x2\x2\x2\x12F\x134"+
		"\a~\x2\x2\x130\x132\a\x88\x2\x2\x131\x133\x5\x8CG\x2\x132\x131\x3\x2\x2"+
		"\x2\x132\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x130\x3\x2\x2\x2"+
		"\x134\x135\x3\x2\x2\x2\x135\x13B\x3\x2\x2\x2\x136\x138\a\x87\x2\x2\x137"+
		"\x139\a\x80\x2\x2\x138\x137\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13A"+
		"\x3\x2\x2\x2\x13A\x13C\x5\x88\x45\x2\x13B\x136\x3\x2\x2\x2\x13B\x13C\x3"+
		"\x2\x2\x2\x13C\x1D\x3\x2\x2\x2\x13D\x13E\a\x80\x2\x2\x13E\x13F\x5\x88"+
		"\x45\x2\x13F\x1F\x3\x2\x2\x2\x140\x14B\x5T+\x2\x141\x142\ap\x2\x2\x142"+
		"\x143\a+\x2\x2\x143\x148\x5\x46$\x2\x144\x145\a\b\x2\x2\x145\x147\x5\x46"+
		"$\x2\x146\x144\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2"+
		"\x148\x149\x3\x2\x2\x2\x149\x14C\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B"+
		"\x141\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x153\x3\x2\x2\x2\x14D\x14E"+
		"\a\x65\x2\x2\x14E\x151\x5\x34\x1B\x2\x14F\x150\t\x4\x2\x2\x150\x152\x5"+
		"\x34\x1B\x2\x151\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x154\x3\x2"+
		"\x2\x2\x153\x14D\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154!\x3\x2\x2\x2\x155"+
		"\x15B\x5$\x13\x2\x156\x157\x5\\/\x2\x157\x158\x5$\x13\x2\x158\x15A\x3"+
		"\x2\x2\x2\x159\x156\x3\x2\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x159\x3\x2"+
		"\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x168\x3\x2\x2\x2\x15D\x15B\x3\x2\x2"+
		"\x2\x15E\x15F\ap\x2\x2\x15F\x160\a+\x2\x2\x160\x165\x5\x46$\x2\x161\x162"+
		"\a\b\x2\x2\x162\x164\x5\x46$\x2\x163\x161\x3\x2\x2\x2\x164\x167\x3\x2"+
		"\x2\x2\x165\x163\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x169\x3\x2\x2"+
		"\x2\x167\x165\x3\x2\x2\x2\x168\x15E\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2"+
		"\x169\x170\x3\x2\x2\x2\x16A\x16B\a\x65\x2\x2\x16B\x16E\x5\x34\x1B\x2\x16C"+
		"\x16D\t\x4\x2\x2\x16D\x16F\x5\x34\x1B\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F"+
		"\x3\x2\x2\x2\x16F\x171\x3\x2\x2\x2\x170\x16A\x3\x2\x2\x2\x170\x171\x3"+
		"\x2\x2\x2\x171#\x3\x2\x2\x2\x172\x174\a\x81\x2\x2\x173\x175\t\x5\x2\x2"+
		"\x174\x173\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176"+
		"\x17B\x5H%\x2\x177\x178\a\b\x2\x2\x178\x17A\x5H%\x2\x179\x177\x3\x2\x2"+
		"\x2\x17A\x17D\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2"+
		"\x17C\x18A\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17E\x188\aN\x2\x2\x17F\x184"+
		"\x5J&\x2\x180\x181\a\b\x2\x2\x181\x183\x5J&\x2\x182\x180\x3\x2\x2\x2\x183"+
		"\x186\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x189"+
		"\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x187\x189\x5L\'\x2\x188\x17F\x3\x2"+
		"\x2\x2\x188\x187\x3\x2\x2\x2\x189\x18B\x3\x2\x2\x2\x18A\x17E\x3\x2\x2"+
		"\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18D\a\x92\x2\x2"+
		"\x18D\x18F\x5\x34\x1B\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F"+
		"\x19E\x3\x2\x2\x2\x190\x191\aQ\x2\x2\x191\x192\a+\x2\x2\x192\x197\x5\x34"+
		"\x1B\x2\x193\x194\a\b\x2\x2\x194\x196\x5\x34\x1B\x2\x195\x193\x3\x2\x2"+
		"\x2\x196\x199\x3\x2\x2\x2\x197\x195\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2"+
		"\x198\x19C\x3\x2\x2\x2\x199\x197\x3\x2\x2\x2\x19A\x19B\aR\x2\x2\x19B\x19D"+
		"\x5\x34\x1B\x2\x19C\x19A\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x19F\x3"+
		"\x2\x2\x2\x19E\x190\x3\x2\x2\x2\x19E\x19F\x3\x2\x2\x2\x19F\x1BD\x3\x2"+
		"\x2\x2\x1A0\x1A1\a\x8E\x2\x2\x1A1\x1A2\a\x6\x2\x2\x1A2\x1A7\x5\x34\x1B"+
		"\x2\x1A3\x1A4\a\b\x2\x2\x1A4\x1A6\x5\x34\x1B\x2\x1A5\x1A3\x3\x2\x2\x2"+
		"\x1A6\x1A9\x3\x2\x2\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8"+
		"\x1AA\x3\x2\x2\x2\x1A9\x1A7\x3\x2\x2\x2\x1AA\x1B9\a\a\x2\x2\x1AB\x1AC"+
		"\a\b\x2\x2\x1AC\x1AD\a\x6\x2\x2\x1AD\x1B2\x5\x34\x1B\x2\x1AE\x1AF\a\b"+
		"\x2\x2\x1AF\x1B1\x5\x34\x1B\x2\x1B0\x1AE\x3\x2\x2\x2\x1B1\x1B4\x3\x2\x2"+
		"\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B5\x3\x2\x2\x2"+
		"\x1B4\x1B2\x3\x2\x2\x2\x1B5\x1B6\a\a\x2\x2\x1B6\x1B8\x3\x2\x2\x2\x1B7"+
		"\x1AB\x3\x2\x2\x2\x1B8\x1BB\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1BA"+
		"\x3\x2\x2\x2\x1BA\x1BD\x3\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BC\x172\x3"+
		"\x2\x2\x2\x1BC\x1A0\x3\x2\x2\x2\x1BD%\x3\x2\x2\x2\x1BE\x1BF\a\x8C\x2\x2"+
		"\x1BF\x1C0\x5\x44#\x2\x1C0\x1C2\x5(\x15\x2\x1C1\x1C3\x5V,\x2\x1C2\x1C1"+
		"\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\'\x3\x2\x2\x2\x1C4\x1C5\a\x82"+
		"\x2\x2\x1C5\x1CA\x5\x34\x1B\x2\x1C6\x1C7\a\b\x2\x2\x1C7\x1C9\x5\x34\x1B"+
		"\x2\x1C8\x1C6\x3\x2\x2\x2\x1C9\x1CC\x3\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2"+
		"\x1CA\x1CB\x3\x2\x2\x2\x1CB)\x3\x2\x2\x2\x1CC\x1CA\x3\x2\x2\x2\x1CD\x1D8"+
		"\a\x8C\x2\x2\x1CE\x1CF\ao\x2\x2\x1CF\x1D9\a~\x2\x2\x1D0\x1D1\ao\x2\x2"+
		"\x1D1\x1D9\a\x1C\x2\x2\x1D2\x1D3\ao\x2\x2\x1D3\x1D9\a{\x2\x2\x1D4\x1D5"+
		"\ao\x2\x2\x1D5\x1D9\aK\x2\x2\x1D6\x1D7\ao\x2\x2\x1D7\x1D9\aT\x2\x2\x1D8"+
		"\x1CE\x3\x2\x2\x2\x1D8\x1D0\x3\x2\x2\x2\x1D8\x1D2\x3\x2\x2\x2\x1D8\x1D4"+
		"\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DA\x3"+
		"\x2\x2\x2\x1DA\x1DB\x5\x44#\x2\x1DB\x1DC\a\x82\x2\x2\x1DC\x1DD\x5x=\x2"+
		"\x1DD\x1DE\a\t\x2\x2\x1DE\x1E6\x5\x34\x1B\x2\x1DF\x1E0\a\b\x2\x2\x1E0"+
		"\x1E1\x5x=\x2\x1E1\x1E2\a\t\x2\x2\x1E2\x1E3\x5\x34\x1B\x2\x1E3\x1E5\x3"+
		"\x2\x2\x2\x1E4\x1DF\x3\x2\x2\x2\x1E5\x1E8\x3\x2\x2\x2\x1E6\x1E4\x3\x2"+
		"\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1EB\x3\x2\x2\x2\x1E8\x1E6\x3\x2\x2"+
		"\x2\x1E9\x1EA\a\x92\x2\x2\x1EA\x1EC\x5\x34\x1B\x2\x1EB\x1E9\x3\x2\x2\x2"+
		"\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1FF\x3\x2\x2\x2\x1ED\x1EE\ap\x2\x2\x1EE\x1EF"+
		"\a+\x2\x2\x1EF\x1F4\x5\x46$\x2\x1F0\x1F1\a\b\x2\x2\x1F1\x1F3\x5\x46$\x2"+
		"\x1F2\x1F0\x3\x2\x2\x2\x1F3\x1F6\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4"+
		"\x1F5\x3\x2\x2\x2\x1F5\x1F8\x3\x2\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F7\x1ED"+
		"\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FA\a\x65"+
		"\x2\x2\x1FA\x1FD\x5\x34\x1B\x2\x1FB\x1FC\t\x4\x2\x2\x1FC\x1FE\x5\x34\x1B"+
		"\x2\x1FD\x1FB\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x200\x3\x2\x2\x2"+
		"\x1FF\x1F7\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200+\x3\x2\x2\x2\x201\x203"+
		"\x5x=\x2\x202\x204\x5.\x18\x2\x203\x202\x3\x2\x2\x2\x203\x204\x3\x2\x2"+
		"\x2\x204\x208\x3\x2\x2\x2\x205\x207\x5\x30\x19\x2\x206\x205\x3\x2\x2\x2"+
		"\x207\x20A\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209"+
		"-\x3\x2\x2\x2\x20A\x208\x3\x2\x2\x2\x20B\x20D\x5l\x37\x2\x20C\x20B\x3"+
		"\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2"+
		"\x2\x2\x20F\x21A\x3\x2\x2\x2\x210\x211\a\x6\x2\x2\x211\x212\x5^\x30\x2"+
		"\x212\x213\a\a\x2\x2\x213\x21B\x3\x2\x2\x2\x214\x215\a\x6\x2\x2\x215\x216"+
		"\x5^\x30\x2\x216\x217\a\b\x2\x2\x217\x218\x5^\x30\x2\x218\x219\a\a\x2"+
		"\x2\x219\x21B\x3\x2\x2\x2\x21A\x210\x3\x2\x2\x2\x21A\x214\x3\x2\x2\x2"+
		"\x21A\x21B\x3\x2\x2\x2\x21B/\x3\x2\x2\x2\x21C\x21D\a\x34\x2\x2\x21D\x21F"+
		"\x5l\x37\x2\x21E\x21C\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x241\x3\x2"+
		"\x2\x2\x220\x221\as\x2\x2\x221\x223\a\x62\x2\x2\x222\x224\t\x6\x2\x2\x223"+
		"\x222\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x227"+
		"\x5\x32\x1A\x2\x226\x228\a\'\x2\x2\x227\x226\x3\x2\x2\x2\x227\x228\x3"+
		"\x2\x2\x2\x228\x242\x3\x2\x2\x2\x229\x22B\ai\x2\x2\x22A\x229\x3\x2\x2"+
		"\x2\x22A\x22B\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x22D\ak\x2\x2\x22D"+
		"\x242\x5\x32\x1A\x2\x22E\x22F\a\x8B\x2\x2\x22F\x242\x5\x32\x1A\x2\x230"+
		"\x231\a/\x2\x2\x231\x232\a\x6\x2\x2\x232\x233\x5\x34\x1B\x2\x233\x234"+
		"\a\a\x2\x2\x234\x242\x3\x2\x2\x2\x235\x23C\a;\x2\x2\x236\x23D\x5^\x30"+
		"\x2\x237\x23D\x5`\x31\x2\x238\x239\a\x6\x2\x2\x239\x23A\x5\x34\x1B\x2"+
		"\x23A\x23B\a\a\x2\x2\x23B\x23D\x3\x2\x2\x2\x23C\x236\x3\x2\x2\x2\x23C"+
		"\x237\x3\x2\x2\x2\x23C\x238\x3\x2\x2\x2\x23D\x242\x3\x2\x2\x2\x23E\x23F"+
		"\a\x30\x2\x2\x23F\x242\x5z>\x2\x240\x242\x5<\x1F\x2\x241\x220\x3\x2\x2"+
		"\x2\x241\x22A\x3\x2\x2\x2\x241\x22E\x3\x2\x2\x2\x241\x230\x3\x2\x2\x2"+
		"\x241\x235\x3\x2\x2\x2\x241\x23E\x3\x2\x2\x2\x241\x240\x3\x2\x2\x2\x242"+
		"\x31\x3\x2\x2\x2\x243\x244\an\x2\x2\x244\x245\a\x33\x2\x2\x245\x247\t"+
		"\a\x2\x2\x246\x243\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x33\x3\x2\x2"+
		"\x2\x248\x249\b\x1B\x1\x2\x249\x284\x5`\x31\x2\x24A\x284\a\x95\x2\x2\x24B"+
		"\x24C\x5p\x39\x2\x24C\x24D\a\x5\x2\x2\x24D\x24F\x3\x2\x2\x2\x24E\x24B"+
		"\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x251\x5"+
		"r:\x2\x251\x252\a\x5\x2\x2\x252\x254\x3\x2\x2\x2\x253\x24E\x3\x2\x2\x2"+
		"\x253\x254\x3\x2\x2\x2\x254\x255\x3\x2\x2\x2\x255\x284\x5x=\x2\x256\x257"+
		"\x5\x62\x32\x2\x257\x258\x5\x34\x1B\x17\x258\x284\x3\x2\x2\x2\x259\x284"+
		"\x5\x38\x1D\x2\x25A\x25B\a\x6\x2\x2\x25B\x25C\x5\x34\x1B\x2\x25C\x25D"+
		"\a\a\x2\x2\x25D\x284\x3\x2\x2\x2\x25E\x25F\a.\x2\x2\x25F\x260\a\x6\x2"+
		"\x2\x260\x261\x5\x34\x1B\x2\x261\x262\a$\x2\x2\x262\x263\x5.\x18\x2\x263"+
		"\x264\a\a\x2\x2\x264\x284\x3\x2\x2\x2\x265\x267\ai\x2\x2\x266\x265\x3"+
		"\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x26A\aI\x2"+
		"\x2\x269\x266\x3\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2"+
		"\x26B\x26C\a\x6\x2\x2\x26C\x26D\x5\x10\t\x2\x26D\x26E\a\a\x2\x2\x26E\x284"+
		"\x3\x2\x2\x2\x26F\x271\a-\x2\x2\x270\x272\x5\x34\x1B\x2\x271\x270\x3\x2"+
		"\x2\x2\x271\x272\x3\x2\x2\x2\x272\x278\x3\x2\x2\x2\x273\x274\a\x91\x2"+
		"\x2\x274\x275\x5\x34\x1B\x2\x275\x276\a\x86\x2\x2\x276\x277\x5\x34\x1B"+
		"\x2\x277\x279\x3\x2\x2\x2\x278\x273\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2"+
		"\x27A\x278\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27E\x3\x2\x2\x2\x27C"+
		"\x27D\a\x44\x2\x2\x27D\x27F\x5\x34\x1B\x2\x27E\x27C\x3\x2\x2\x2\x27E\x27F"+
		"\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x281\a\x45\x2\x2\x281\x284\x3"+
		"\x2\x2\x2\x282\x284\x5> \x2\x283\x248\x3\x2\x2\x2\x283\x24A\x3\x2\x2\x2"+
		"\x283\x253\x3\x2\x2\x2\x283\x256\x3\x2\x2\x2\x283\x259\x3\x2\x2\x2\x283"+
		"\x25A\x3\x2\x2\x2\x283\x25E\x3\x2\x2\x2\x283\x269\x3\x2\x2\x2\x283\x26F"+
		"\x3\x2\x2\x2\x283\x282\x3\x2\x2\x2\x284\x2E0\x3\x2\x2\x2\x285\x286\f\x16"+
		"\x2\x2\x286\x287\a\xE\x2\x2\x287\x2DF\x5\x34\x1B\x17\x288\x289\f\x15\x2"+
		"\x2\x289\x28A\t\b\x2\x2\x28A\x2DF\x5\x34\x1B\x16\x28B\x28C\f\x14\x2\x2"+
		"\x28C\x28D\t\t\x2\x2\x28D\x2DF\x5\x34\x1B\x15\x28E\x28F\f\x13\x2\x2\x28F"+
		"\x290\t\n\x2\x2\x290\x2DF\x5\x34\x1B\x14\x291\x292\f\x12\x2\x2\x292\x293"+
		"\t\v\x2\x2\x293\x2DF\x5\x34\x1B\x13\x294\x2A0\f\x11\x2\x2\x295\x2A1\a"+
		"\t\x2\x2\x296\x2A1\a\x19\x2\x2\x297\x2A1\a\x1A\x2\x2\x298\x2A1\a\x1B\x2"+
		"\x2\x299\x2A1\a_\x2\x2\x29A\x29B\a_\x2\x2\x29B\x2A1\ai\x2\x2\x29C\x2A1"+
		"\a\x64\x2\x2\x29D\x2A1\aP\x2\x2\x29E\x2A1\a\x66\x2\x2\x29F\x2A1\aw\x2"+
		"\x2\x2A0\x295\x3\x2\x2\x2\x2A0\x296\x3\x2\x2\x2\x2A0\x297\x3\x2\x2\x2"+
		"\x2A0\x298\x3\x2\x2\x2\x2A0\x299\x3\x2\x2\x2\x2A0\x29A\x3\x2\x2\x2\x2A0"+
		"\x29C\x3\x2\x2\x2\x2A0\x29D\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A0\x29F"+
		"\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2DF\x5\x34\x1B\x12\x2A3\x2A4"+
		"\f\x10\x2\x2\x2A4\x2A5\a#\x2\x2\x2A5\x2DF\x5\x34\x1B\x11\x2A6\x2A7\f\xF"+
		"\x2\x2\x2A7\x2A8\ao\x2\x2\x2A8\x2DF\x5\x34\x1B\x10\x2A9\x2AA\f\b\x2\x2"+
		"\x2AA\x2AC\a_\x2\x2\x2AB\x2AD\ai\x2\x2\x2AC\x2AB\x3\x2\x2\x2\x2AC\x2AD"+
		"\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE\x2DF\x5\x34\x1B\t\x2AF\x2B1\f"+
		"\a\x2\x2\x2B0\x2B2\ai\x2\x2\x2B1\x2B0\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2"+
		"\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B4\a*\x2\x2\x2B4\x2B5\x5\x34\x1B\x2\x2B5"+
		"\x2B6\a#\x2\x2\x2B6\x2B7\x5\x34\x1B\b\x2B7\x2DF\x3\x2\x2\x2\x2B8\x2B9"+
		"\f\v\x2\x2\x2B9\x2BA\a\x30\x2\x2\x2BA\x2DF\x5z>\x2\x2BB\x2BD\f\n\x2\x2"+
		"\x2BC\x2BE\ai\x2\x2\x2BD\x2BC\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2BF"+
		"\x3\x2\x2\x2\x2BF\x2C0\t\f\x2\x2\x2C0\x2C3\x5\x34\x1B\x2\x2C1\x2C2\a\x46"+
		"\x2\x2\x2C2\x2C4\x5\x34\x1B\x2\x2C3\x2C1\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2"+
		"\x2\x2C4\x2DF\x3\x2\x2\x2\x2C5\x2CA\f\t\x2\x2\x2C6\x2CB\a`\x2\x2\x2C7"+
		"\x2CB\aj\x2\x2\x2C8\x2C9\ai\x2\x2\x2C9\x2CB\ak\x2\x2\x2CA\x2C6\x3\x2\x2"+
		"\x2\x2CA\x2C7\x3\x2\x2\x2\x2CA\x2C8\x3\x2\x2\x2\x2CB\x2DF\x3\x2\x2\x2"+
		"\x2CC\x2CE\f\x6\x2\x2\x2CD\x2CF\ai\x2\x2\x2CE\x2CD\x3\x2\x2\x2\x2CE\x2CF"+
		"\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2DC\aV\x2\x2\x2D1\x2D2\a\x6\x2"+
		"\x2\x2D2\x2D3\x5\x10\t\x2\x2D3\x2D4\a\a\x2\x2\x2D4\x2DD\x3\x2\x2\x2\x2D5"+
		"\x2DD\x5\x36\x1C\x2\x2D6\x2D7\x5p\x39\x2\x2D7\x2D8\a\x5\x2\x2\x2D8\x2DA"+
		"\x3\x2\x2\x2\x2D9\x2D6\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2\x2DA\x2DB\x3"+
		"\x2\x2\x2\x2DB\x2DD\x5r:\x2\x2DC\x2D1\x3\x2\x2\x2\x2DC\x2D5\x3\x2\x2\x2"+
		"\x2DC\x2D9\x3\x2\x2\x2\x2DD\x2DF\x3\x2\x2\x2\x2DE\x285\x3\x2\x2\x2\x2DE"+
		"\x288\x3\x2\x2\x2\x2DE\x28B\x3\x2\x2\x2\x2DE\x28E\x3\x2\x2\x2\x2DE\x291"+
		"\x3\x2\x2\x2\x2DE\x294\x3\x2\x2\x2\x2DE\x2A3\x3\x2\x2\x2\x2DE\x2A6\x3"+
		"\x2\x2\x2\x2DE\x2A9\x3\x2\x2\x2\x2DE\x2AF\x3\x2\x2\x2\x2DE\x2B8\x3\x2"+
		"\x2\x2\x2DE\x2BB\x3\x2\x2\x2\x2DE\x2C5\x3\x2\x2\x2\x2DE\x2CC\x3\x2\x2"+
		"\x2\x2DF\x2E2\x3\x2\x2\x2\x2E0\x2DE\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2"+
		"\x2E1\x35\x3\x2\x2\x2\x2E2\x2E0\x3\x2\x2\x2\x2E3\x2E4\a\x6\x2\x2\x2E4"+
		"\x2E9\x5\x34\x1B\x2\x2E5\x2E6\a\b\x2\x2\x2E6\x2E8\x5\x34\x1B\x2\x2E7\x2E5"+
		"\x3\x2\x2\x2\x2E8\x2EB\x3\x2\x2\x2\x2E9\x2E7\x3\x2\x2\x2\x2E9\x2EA\x3"+
		"\x2\x2\x2\x2EA\x2EC\x3\x2\x2\x2\x2EB\x2E9\x3\x2\x2\x2\x2EC\x2ED\a\a\x2"+
		"\x2\x2ED\x37\x3\x2\x2\x2\x2EE\x2EF\x5n\x38\x2\x2EF\x2F1\a\x6\x2\x2\x2F0"+
		"\x2F2\x5:\x1E\x2\x2F1\x2F0\x3\x2\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2\x2F3"+
		"\x3\x2\x2\x2\x2F3\x2F4\a\a\x2\x2\x2F4\x39\x3\x2\x2\x2\x2F5\x2FF\a\n\x2"+
		"\x2\x2F6\x2FB\x5\x34\x1B\x2\x2F7\x2F8\a\b\x2\x2\x2F8\x2FA\x5\x34\x1B\x2"+
		"\x2F9\x2F7\x3\x2\x2\x2\x2FA\x2FD\x3\x2\x2\x2\x2FB\x2F9\x3\x2\x2\x2\x2FB"+
		"\x2FC\x3\x2\x2\x2\x2FC\x2FF\x3\x2\x2\x2\x2FD\x2FB\x3\x2\x2\x2\x2FE\x2F5"+
		"\x3\x2\x2\x2\x2FE\x2F6\x3\x2\x2\x2\x2FF;\x3\x2\x2\x2\x300\x301\av\x2\x2"+
		"\x301\x30D\x5|?\x2\x302\x303\a\x6\x2\x2\x303\x308\x5x=\x2\x304\x305\a"+
		"\b\x2\x2\x305\x307\x5x=\x2\x306\x304\x3\x2\x2\x2\x307\x30A\x3\x2\x2\x2"+
		"\x308\x306\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30B\x3\x2\x2\x2\x30A"+
		"\x308\x3\x2\x2\x2\x30B\x30C\a\a\x2\x2\x30C\x30E\x3\x2\x2\x2\x30D\x302"+
		"\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x321\x3\x2\x2\x2\x30F\x310\an"+
		"\x2\x2\x310\x319\t\r\x2\x2\x311\x312\a\x82\x2\x2\x312\x31A\ak\x2\x2\x313"+
		"\x314\a\x82\x2\x2\x314\x31A\a;\x2\x2\x315\x31A\a,\x2\x2\x316\x31A\a|\x2"+
		"\x2\x317\x318\ah\x2\x2\x318\x31A\a\x1D\x2\x2\x319\x311\x3\x2\x2\x2\x319"+
		"\x313\x3\x2\x2\x2\x319\x315\x3\x2\x2\x2\x319\x316\x3\x2\x2\x2\x319\x317"+
		"\x3\x2\x2\x2\x31A\x31E\x3\x2\x2\x2\x31B\x31C\a\x66\x2\x2\x31C\x31E\x5"+
		"l\x37\x2\x31D\x30F\x3\x2\x2\x2\x31D\x31B\x3\x2\x2\x2\x31E\x320\x3\x2\x2"+
		"\x2\x31F\x31D\x3\x2\x2\x2\x320\x323\x3\x2\x2\x2\x321\x31F\x3\x2\x2\x2"+
		"\x321\x322\x3\x2\x2\x2\x322\x32E\x3\x2\x2\x2\x323\x321\x3\x2\x2\x2\x324"+
		"\x326\ai\x2\x2\x325\x324\x3\x2\x2\x2\x325\x326\x3\x2\x2\x2\x326\x327\x3"+
		"\x2\x2\x2\x327\x32C\a<\x2\x2\x328\x329\aY\x2\x2\x329\x32D\a=\x2\x2\x32A"+
		"\x32B\aY\x2\x2\x32B\x32D\aU\x2\x2\x32C\x328\x3\x2\x2\x2\x32C\x32A\x3\x2"+
		"\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D\x32F\x3\x2\x2\x2\x32E\x325\x3\x2\x2"+
		"\x2\x32E\x32F\x3\x2\x2\x2\x32F=\x3\x2\x2\x2\x330\x331\au\x2\x2\x331\x336"+
		"\a\x6\x2\x2\x332\x337\aT\x2\x2\x333\x334\t\xE\x2\x2\x334\x335\a\b\x2\x2"+
		"\x335\x337\x5\x64\x33\x2\x336\x332\x3\x2\x2\x2\x336\x333\x3\x2\x2\x2\x337"+
		"\x338\x3\x2\x2\x2\x338\x339\a\a\x2\x2\x339?\x3\x2\x2\x2\x33A\x33D\x5x"+
		"=\x2\x33B\x33C\a\x30\x2\x2\x33C\x33E\x5z>\x2\x33D\x33B\x3\x2\x2\x2\x33D"+
		"\x33E\x3\x2\x2\x2\x33E\x340\x3\x2\x2\x2\x33F\x341\t\x6\x2\x2\x340\x33F"+
		"\x3\x2\x2\x2\x340\x341\x3\x2\x2\x2\x341\x41\x3\x2\x2\x2\x342\x343\a\x34"+
		"\x2\x2\x343\x345\x5l\x37\x2\x344\x342\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2"+
		"\x345\x36A\x3\x2\x2\x2\x346\x347\as\x2\x2\x347\x34A\a\x62\x2\x2\x348\x34A"+
		"\a\x8B\x2\x2\x349\x346\x3\x2\x2\x2\x349\x348\x3\x2\x2\x2\x34A\x34B\x3"+
		"\x2\x2\x2\x34B\x34C\a\x6\x2\x2\x34C\x351\x5@!\x2\x34D\x34E\a\b\x2\x2\x34E"+
		"\x350\x5@!\x2\x34F\x34D\x3\x2\x2\x2\x350\x353\x3\x2\x2\x2\x351\x34F\x3"+
		"\x2\x2\x2\x351\x352\x3\x2\x2\x2\x352\x354\x3\x2\x2\x2\x353\x351\x3\x2"+
		"\x2\x2\x354\x355\a\a\x2\x2\x355\x356\x5\x32\x1A\x2\x356\x36B\x3\x2\x2"+
		"\x2\x357\x358\a/\x2\x2\x358\x359\a\x6\x2\x2\x359\x35A\x5\x34\x1B\x2\x35A"+
		"\x35B\a\a\x2\x2\x35B\x36B\x3\x2\x2\x2\x35C\x35D\aM\x2\x2\x35D\x35E\a\x62"+
		"\x2\x2\x35E\x35F\a\x6\x2\x2\x35F\x364\x5x=\x2\x360\x361\a\b\x2\x2\x361"+
		"\x363\x5x=\x2\x362\x360\x3\x2\x2\x2\x363\x366\x3\x2\x2\x2\x364\x362\x3"+
		"\x2\x2\x2\x364\x365\x3\x2\x2\x2\x365\x367\x3\x2\x2\x2\x366\x364\x3\x2"+
		"\x2\x2\x367\x368\a\a\x2\x2\x368\x369\x5<\x1F\x2\x369\x36B\x3\x2\x2\x2"+
		"\x36A\x349\x3\x2\x2\x2\x36A\x357\x3\x2\x2\x2\x36A\x35C\x3\x2\x2\x2\x36B"+
		"\x43\x3\x2\x2\x2\x36C\x36D\x5p\x39\x2\x36D\x36E\a\x5\x2\x2\x36E\x370\x3"+
		"\x2\x2\x2\x36F\x36C\x3\x2\x2\x2\x36F\x370\x3\x2\x2\x2\x370\x371\x3\x2"+
		"\x2\x2\x371\x372\x5r:\x2\x372\x45\x3\x2\x2\x2\x373\x376\x5\x34\x1B\x2"+
		"\x374\x375\a\x30\x2\x2\x375\x377\x5z>\x2\x376\x374\x3\x2\x2\x2\x376\x377"+
		"\x3\x2\x2\x2\x377\x379\x3\x2\x2\x2\x378\x37A\t\x6\x2\x2\x379\x378\x3\x2"+
		"\x2\x2\x379\x37A\x3\x2\x2\x2\x37AG\x3\x2\x2\x2\x37B\x388\a\n\x2\x2\x37C"+
		"\x37D\x5r:\x2\x37D\x37E\a\x5\x2\x2\x37E\x37F\a\n\x2\x2\x37F\x388\x3\x2"+
		"\x2\x2\x380\x385\x5\x34\x1B\x2\x381\x383\a$\x2\x2\x382\x381\x3\x2\x2\x2"+
		"\x382\x383\x3\x2\x2\x2\x383\x384\x3\x2\x2\x2\x384\x386\x5h\x35\x2\x385"+
		"\x382\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2\x386\x388\x3\x2\x2\x2\x387\x37B"+
		"\x3\x2\x2\x2\x387\x37C\x3\x2\x2\x2\x387\x380\x3\x2\x2\x2\x388I\x3\x2\x2"+
		"\x2\x389\x38A\x5p\x39\x2\x38A\x38B\a\x5\x2\x2\x38B\x38D\x3\x2\x2\x2\x38C"+
		"\x389\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x393"+
		"\x5r:\x2\x38F\x391\a$\x2\x2\x390\x38F\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2"+
		"\x391\x392\x3\x2\x2\x2\x392\x394\x5\x8A\x46\x2\x393\x390\x3\x2\x2\x2\x393"+
		"\x394\x3\x2\x2\x2\x394\x39A\x3\x2\x2\x2\x395\x396\aX\x2\x2\x396\x397\a"+
		"+\x2\x2\x397\x39B\x5~@\x2\x398\x399\ai\x2\x2\x399\x39B\aX\x2\x2\x39A\x395"+
		"\x3\x2\x2\x2\x39A\x398\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x3B9\x3"+
		"\x2\x2\x2\x39C\x3A6\a\x6\x2\x2\x39D\x3A2\x5J&\x2\x39E\x39F\a\b\x2\x2\x39F"+
		"\x3A1\x5J&\x2\x3A0\x39E\x3\x2\x2\x2\x3A1\x3A4\x3\x2\x2\x2\x3A2\x3A0\x3"+
		"\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A7\x3\x2\x2\x2\x3A4\x3A2\x3\x2"+
		"\x2\x2\x3A5\x3A7\x5L\'\x2\x3A6\x39D\x3\x2\x2\x2\x3A6\x3A5\x3\x2\x2\x2"+
		"\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3AD\a\a\x2\x2\x3A9\x3AB\a$\x2\x2\x3AA\x3A9"+
		"\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3AE\x5"+
		"\x8A\x46\x2\x3AD\x3AA\x3\x2\x2\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE\x3B9\x3\x2"+
		"\x2\x2\x3AF\x3B0\a\x6\x2\x2\x3B0\x3B1\x5\"\x12\x2\x3B1\x3B6\a\a\x2\x2"+
		"\x3B2\x3B4\a$\x2\x2\x3B3\x3B2\x3\x2\x2\x2\x3B3\x3B4\x3\x2\x2\x2\x3B4\x3B5"+
		"\x3\x2\x2\x2\x3B5\x3B7\x5\x8A\x46\x2\x3B6\x3B3\x3\x2\x2\x2\x3B6\x3B7\x3"+
		"\x2\x2\x2\x3B7\x3B9\x3\x2\x2\x2\x3B8\x38C\x3\x2\x2\x2\x3B8\x39C\x3\x2"+
		"\x2\x2\x3B8\x3AF\x3\x2\x2\x2\x3B9K\x3\x2\x2\x2\x3BA\x3BE\x5J&\x2\x3BB"+
		"\x3BD\x5N(\x2\x3BC\x3BB\x3\x2\x2\x2\x3BD\x3C0\x3\x2\x2\x2\x3BE\x3BC\x3"+
		"\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BFM\x3\x2\x2\x2\x3C0\x3BE\x3\x2\x2\x2"+
		"\x3C1\x3C2\x5P)\x2\x3C2\x3C3\x5J&\x2\x3C3\x3C4\x5R*\x2\x3C4O\x3\x2\x2"+
		"\x2\x3C5\x3D3\a\b\x2\x2\x3C6\x3C8\ag\x2\x2\x3C7\x3C6\x3\x2\x2\x2\x3C7"+
		"\x3C8\x3\x2\x2\x2\x3C8\x3CF\x3\x2\x2\x2\x3C9\x3CB\a\x63\x2\x2\x3CA\x3CC"+
		"\aq\x2\x2\x3CB\x3CA\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2\x3CC\x3D0\x3\x2"+
		"\x2\x2\x3CD\x3D0\aZ\x2\x2\x3CE\x3D0\a\x36\x2\x2\x3CF\x3C9\x3\x2\x2\x2"+
		"\x3CF\x3CD\x3\x2\x2\x2\x3CF\x3CE\x3\x2\x2\x2\x3CF\x3D0\x3\x2\x2\x2\x3D0"+
		"\x3D1\x3\x2\x2\x2\x3D1\x3D3\a\x61\x2\x2\x3D2\x3C5\x3\x2\x2\x2\x3D2\x3C7"+
		"\x3\x2\x2\x2\x3D3Q\x3\x2\x2\x2\x3D4\x3D5\an\x2\x2\x3D5\x3E3\x5\x34\x1B"+
		"\x2\x3D6\x3D7\a\x8D\x2\x2\x3D7\x3D8\a\x6\x2\x2\x3D8\x3DD\x5x=\x2\x3D9"+
		"\x3DA\a\b\x2\x2\x3DA\x3DC\x5x=\x2\x3DB\x3D9\x3\x2\x2\x2\x3DC\x3DF\x3\x2"+
		"\x2\x2\x3DD\x3DB\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE\x3E0\x3\x2\x2"+
		"\x2\x3DF\x3DD\x3\x2\x2\x2\x3E0\x3E1\a\a\x2\x2\x3E1\x3E3\x3\x2\x2\x2\x3E2"+
		"\x3D4\x3\x2\x2\x2\x3E2\x3D6\x3\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3S\x3"+
		"\x2\x2\x2\x3E4\x3E6\a\x81\x2\x2\x3E5\x3E7\t\x5\x2\x2\x3E6\x3E5\x3\x2\x2"+
		"\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7\x3E8\x3\x2\x2\x2\x3E8\x3ED\x5H%\x2\x3E9"+
		"\x3EA\a\b\x2\x2\x3EA\x3EC\x5H%\x2\x3EB\x3E9\x3\x2\x2\x2\x3EC\x3EF\x3\x2"+
		"\x2\x2\x3ED\x3EB\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3FC\x3\x2\x2"+
		"\x2\x3EF\x3ED\x3\x2\x2\x2\x3F0\x3FA\aN\x2\x2\x3F1\x3F6\x5J&\x2\x3F2\x3F3"+
		"\a\b\x2\x2\x3F3\x3F5\x5J&\x2\x3F4\x3F2\x3\x2\x2\x2\x3F5\x3F8\x3\x2\x2"+
		"\x2\x3F6\x3F4\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3FB\x3\x2\x2\x2"+
		"\x3F8\x3F6\x3\x2\x2\x2\x3F9\x3FB\x5L\'\x2\x3FA\x3F1\x3\x2\x2\x2\x3FA\x3F9"+
		"\x3\x2\x2\x2\x3FB\x3FD\x3\x2\x2\x2\x3FC\x3F0\x3\x2\x2\x2\x3FC\x3FD\x3"+
		"\x2\x2\x2\x3FD\x3FF\x3\x2\x2\x2\x3FE\x400\x5V,\x2\x3FF\x3FE\x3\x2\x2\x2"+
		"\x3FF\x400\x3\x2\x2\x2\x400\x402\x3\x2\x2\x2\x401\x403\x5X-\x2\x402\x401"+
		"\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x421\x3\x2\x2\x2\x404\x405\a\x8E"+
		"\x2\x2\x405\x406\a\x6\x2\x2\x406\x40B\x5\x34\x1B\x2\x407\x408\a\b\x2\x2"+
		"\x408\x40A\x5\x34\x1B\x2\x409\x407\x3\x2\x2\x2\x40A\x40D\x3\x2\x2\x2\x40B"+
		"\x409\x3\x2\x2\x2\x40B\x40C\x3\x2\x2\x2\x40C\x40E\x3\x2\x2\x2\x40D\x40B"+
		"\x3\x2\x2\x2\x40E\x41D\a\a\x2\x2\x40F\x410\a\b\x2\x2\x410\x411\a\x6\x2"+
		"\x2\x411\x416\x5\x34\x1B\x2\x412\x413\a\b\x2\x2\x413\x415\x5\x34\x1B\x2"+
		"\x414\x412\x3\x2\x2\x2\x415\x418\x3\x2\x2\x2\x416\x414\x3\x2\x2\x2\x416"+
		"\x417\x3\x2\x2\x2\x417\x419\x3\x2\x2\x2\x418\x416\x3\x2\x2\x2\x419\x41A"+
		"\a\a\x2\x2\x41A\x41C\x3\x2\x2\x2\x41B\x40F\x3\x2\x2\x2\x41C\x41F\x3\x2"+
		"\x2\x2\x41D\x41B\x3\x2\x2\x2\x41D\x41E\x3\x2\x2\x2\x41E\x421\x3\x2\x2"+
		"\x2\x41F\x41D\x3\x2\x2\x2\x420\x3E4\x3\x2\x2\x2\x420\x404\x3\x2\x2\x2"+
		"\x421U\x3\x2\x2\x2\x422\x423\a\x92\x2\x2\x423\x424\x5\x34\x1B\x2\x424"+
		"W\x3\x2\x2\x2\x425\x426\aQ\x2\x2\x426\x427\a+\x2\x2\x427\x42C\x5\x34\x1B"+
		"\x2\x428\x429\a\b\x2\x2\x429\x42B\x5\x34\x1B\x2\x42A\x428\x3\x2\x2\x2"+
		"\x42B\x42E\x3\x2\x2\x2\x42C\x42A\x3\x2\x2\x2\x42C\x42D\x3\x2\x2\x2\x42D"+
		"\x430\x3\x2\x2\x2\x42E\x42C\x3\x2\x2\x2\x42F\x431\x5Z.\x2\x430\x42F\x3"+
		"\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431Y\x3\x2\x2\x2\x432\x433\aR\x2\x2\x433"+
		"\x434\x5\x34\x1B\x2\x434[\x3\x2\x2\x2\x435\x43B\a\x8A\x2\x2\x436\x437"+
		"\a\x8A\x2\x2\x437\x43B\a \x2\x2\x438\x43B\a]\x2\x2\x439\x43B\aG\x2\x2"+
		"\x43A\x435\x3\x2\x2\x2\x43A\x436\x3\x2\x2\x2\x43A\x438\x3\x2\x2\x2\x43A"+
		"\x439\x3\x2\x2\x2\x43B]\x3\x2\x2\x2\x43C\x43E\t\t\x2\x2\x43D\x43C\x3\x2"+
		"\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x440\a\x94\x2"+
		"\x2\x440_\x3\x2\x2\x2\x441\x442\t\xF\x2\x2\x442\x61\x3\x2\x2\x2\x443\x444"+
		"\t\x10\x2\x2\x444\x63\x3\x2\x2\x2\x445\x446\a\x96\x2\x2\x446\x65\x3\x2"+
		"\x2\x2\x447\x44A\x5\x34\x1B\x2\x448\x44A\x5,\x17\x2\x449\x447\x3\x2\x2"+
		"\x2\x449\x448\x3\x2\x2\x2\x44Ag\x3\x2\x2\x2\x44B\x44C\t\x11\x2\x2\x44C"+
		"i\x3\x2\x2\x2\x44D\x44E\t\x12\x2\x2\x44Ek\x3\x2\x2\x2\x44F\x450\x5\x8E"+
		"H\x2\x450m\x3\x2\x2\x2\x451\x452\x5\x8EH\x2\x452o\x3\x2\x2\x2\x453\x454"+
		"\x5\x8EH\x2\x454q\x3\x2\x2\x2\x455\x456\x5\x8EH\x2\x456s\x3\x2\x2\x2\x457"+
		"\x458\x5\x8EH\x2\x458u\x3\x2\x2\x2\x459\x45A\x5\x8EH\x2\x45Aw\x3\x2\x2"+
		"\x2\x45B\x45C\x5\x8EH\x2\x45Cy\x3\x2\x2\x2\x45D\x45E\x5\x8EH\x2\x45E{"+
		"\x3\x2\x2\x2\x45F\x460\x5\x8EH\x2\x460}\x3\x2\x2\x2\x461\x462\x5\x8EH"+
		"\x2\x462\x7F\x3\x2\x2\x2\x463\x464\x5\x8EH\x2\x464\x81\x3\x2\x2\x2\x465"+
		"\x466\x5\x8EH\x2\x466\x83\x3\x2\x2\x2\x467\x468\x5\x8EH\x2\x468\x85\x3"+
		"\x2\x2\x2\x469\x46A\x5\x8EH\x2\x46A\x87\x3\x2\x2\x2\x46B\x46C\x5\x8EH"+
		"\x2\x46C\x89\x3\x2\x2\x2\x46D\x46E\x5\x8EH\x2\x46E\x8B\x3\x2\x2\x2\x46F"+
		"\x470\x5\x8EH\x2\x470\x8D\x3\x2\x2\x2\x471\x479\a\x93\x2\x2\x472\x479"+
		"\x5j\x36\x2\x473\x479\a\x96\x2\x2\x474\x475\a\x6\x2\x2\x475\x476\x5\x8E"+
		"H\x2\x476\x477\a\a\x2\x2\x477\x479\x3\x2\x2\x2\x478\x471\x3\x2\x2\x2\x478"+
		"\x472\x3\x2\x2\x2\x478\x473\x3\x2\x2\x2\x478\x474\x3\x2\x2\x2\x479\x8F"+
		"\x3\x2\x2\x2\x9A\x91\x96\xA0\xA7\xAC\xB2\xB8\xBA\xC8\xCC\xD0\xD2\xD7\xD9"+
		"\xDF\xE5\xEF\xF2\xF5\xFE\x109\x10E\x116\x11C\x124\x12B\x132\x134\x138"+
		"\x13B\x148\x14B\x151\x153\x15B\x165\x168\x16E\x170\x174\x17B\x184\x188"+
		"\x18A\x18E\x197\x19C\x19E\x1A7\x1B2\x1B9\x1BC\x1C2\x1CA\x1D8\x1E6\x1EB"+
		"\x1F4\x1F7\x1FD\x1FF\x203\x208\x20E\x21A\x21E\x223\x227\x22A\x23C\x241"+
		"\x246\x24E\x253\x266\x269\x271\x27A\x27E\x283\x2A0\x2AC\x2B1\x2BD\x2C3"+
		"\x2CA\x2CE\x2D9\x2DC\x2DE\x2E0\x2E9\x2F1\x2FB\x2FE\x308\x30D\x319\x31D"+
		"\x321\x325\x32C\x32E\x336\x33D\x340\x344\x349\x351\x364\x36A\x36F\x376"+
		"\x379\x382\x385\x387\x38C\x390\x393\x39A\x3A2\x3A6\x3AA\x3AD\x3B3\x3B6"+
		"\x3B8\x3BE\x3C7\x3CB\x3CF\x3D2\x3DD\x3E2\x3E6\x3ED\x3F6\x3FA\x3FC\x3FF"+
		"\x402\x40B\x416\x41D\x420\x42C\x430\x43A\x43D\x449\x478";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace GrapeCity.Enterprise.Data.DataSource.Common.SqlParse
